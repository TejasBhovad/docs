"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[5613],{6102:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"java/assignment/mulithreading","title":"Multithread problem","description":"deadlock multhreading problem","source":"@site/docs/three/java/assignment/mulithreading.mdx","sourceDirName":"java/assignment","slug":"/java/assignment/mulithreading","permalink":"/docs/three/java/assignment/mulithreading","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"deadlock multhreading problem"},"sidebar":"tutorialSidebar","previous":{"title":"Shipment problem","permalink":"/docs/three/java/assignment/shipment"},"next":{"title":"Interface problem","permalink":"/docs/three/java/assignment/interface"}}');var r=t(4848),s=t(8453),i=t(1432);const o='public class Deadlock {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new B();\n\n        Thread t = new Thread(new Runnable() {\n            public void run() {\n                a.foo(b);\n            }\n        });\n        b.bar(a);\n\n        t.start();\n    }\n}\n\nclass A {\n    synchronized void foo(B b) {\n        System.out.println("A.foo()");\n\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            System.out.println("A Interrupted");\n        }\n\n        System.out.println("B.last()");\n        b.last();\n    }\n\n    synchronized void last() {\n        System.out.println("Inside A.last");\n    }\n}\n\nclass B {\n    synchronized void bar(A a) {\n        System.out.println( "B.bar()");\n\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            System.out.println("B Interrupted");\n        }\n\n        System.out.println("A.last()");\n        a.last();\n    }\n\n    synchronized void last() {\n        System.out.println("Inside B.last");\n    }\n}',l={sidebar_position:2,description:"deadlock multhreading problem"},d="Multithread problem",c={},p=[{value:"CODE",id:"code",level:2}];function u(n){const e={h1:"h1",h2:"h2",header:"header",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"multithread-problem",children:"Multithread problem"})}),"\n",(0,r.jsx)(e.h2,{id:"code",children:"CODE"}),"\n",(0,r.jsx)(i.A,{language:"java",children:o})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(u,{...n})}):u(n)}}}]);