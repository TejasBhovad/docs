"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[7525],{5387:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>m,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=e(5893),a=e(1151),i=e(9286);const s='\n//  WAP to print transpose of a matrix take matrix from user\nimport java.util.Scanner;\n\npublic class Transpose {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int r, c;\n        System.out.println("Enter the number of rows: ");\n        r = sc.nextInt();\n        System.out.println("Enter the number of columns: ");\n        c = sc.nextInt();\n        int mat[][] = new int[r][c];\n        Matrix m = new Matrix();\n        mat = m.read(mat);\n        System.out.println("Original matrix: ");\n        m.display(mat);\n        System.out.println("Transpose of matrix: ");\n        m.display(m.transpose(mat));\n\n    }\n}\n\nclass Matrix {\n    int[][] transpose(int[][] mat) {\n        int[][] t = new int[mat[0].length][mat.length];\n        for (int i = 0; i < mat[0].length; i++)\n            for (int j = 0; j < mat.length; j++)\n                t[i][j] = mat[j][i];\n        return t;\n    }\n\n    void display(int[][] mat) {\n        for (int i = 0; i < mat[0].length; i++) {\n            for (int j = 0; j < mat.length; j++)\n                System.out.print(mat[i][j] + " ");\n            System.out.println();\n        }\n    }\n\n    int[][] read(int[][] mat) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println("Enter the elements: ");\n        for (int i = 0; i < mat[0].length; i++)\n            for (int j = 0; j < mat.length; j++)\n                mat[i][j] = sc.nextInt();\n        return mat;\n    }\n}',o={sidebar_position:11,description:"Transpose Matrix in Java"},m="Transpose Matrix",c={id:"java/other/Transpose",title:"Transpose Matrix",description:"Transpose Matrix in Java",source:"@site/docs/three/java/other/Transpose.mdx",sourceDirName:"java/other",slug:"/java/other/Transpose",permalink:"/docs/three/java/other/Transpose",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,description:"Transpose Matrix in Java"},sidebar:"tutorialSidebar",previous:{title:"Sort Array",permalink:"/docs/three/java/other/ArSort"},next:{title:"Column Sum Matrix",permalink:"/docs/three/java/other/ColSum"}},l={},p=[{value:"CODE",id:"code",level:2}];function d(n){const t={h1:"h1",h2:"h2",...(0,a.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"transpose-matrix",children:"Transpose Matrix"}),"\n",(0,r.jsx)(t.h2,{id:"code",children:"CODE"}),"\n",(0,r.jsx)(i.Z,{language:"java",children:s})]})}function u(n={}){const{wrapper:t}={...(0,a.a)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}}}]);