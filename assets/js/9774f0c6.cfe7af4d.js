"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[6144],{1392:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>l});var r=i(5893),o=i(1151),t=i(9163);const s={title:"fork system call",sidebar_position:4,description:"C Program for fork system call"},d="Operating System",p={id:"os/journal/4",title:"fork system call",description:"C Program for fork system call",source:"@site/docs/four/os/journal/4.mdx",sourceDirName:"os/journal",slug:"/os/journal/4",permalink:"/docs/four/os/journal/4",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"fork system call",sidebar_position:4,description:"C Program for fork system call"},sidebar:"tutorialSidebar",previous:{title:"C Program for MOV LS",permalink:"/docs/four/os/journal/3"},next:{title:"Consumer Producer Problem",permalink:"/docs/four/os/journal/5"}},c={},l=[];function a(n){const e={code:"code",h1:"h1",pre:"pre",...(0,o.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"operating-system",children:(0,r.jsx)(t.Z,{name:"banner",description:"C programs for fork system call",children:"Operating System"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\nint main() {\nfork();\nprintf("Hello world!\\n");\nreturn 0;\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main() {\n    pid_t pid, mypid, myppid;\n    pid = getpid();\n    printf("Before fork: Process id is %d\\n", pid);\n    pid = fork();\n    \n    if (pid < 0) {\n        perror("fork() failure\\n");\n        return 1;\n    }\n    \n    // Child process\n    if (pid == 0) {\n        printf("This is child process\\n");\n        mypid = getpid();\n        myppid = getppid();\n        printf("Process id is %d and PPID is %d\\n", mypid, myppid);\n    } else { // Parent process\n        sleep(2);\n        printf("This is parent process\\n");\n        mypid = getpid();\n        myppid = getppid();\n        printf("Process id is %d and PPID is %d\\n", mypid, myppid);\n        printf("Newly created process id or child pid is %d\\n", pid);\n    }\n    \n    return 0;\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}},9163:(n,e,i)=>{i.d(e,{Z:()=>t});i(7294);var r=i(4996),o=i(5893);const t=n=>{let{name:e,description:i,children:t}=n;const s=(0,r.ZP)(`/images/${e}.png`);return(0,o.jsxs)("div",{style:{display:"inline-block",height:"150px",width:"100%",position:"relative",overflow:"hidden",borderRadius:"5px"},children:[(0,o.jsx)("img",{src:s,alt:s,style:{width:"100%",height:"100%",objectFit:"cover",position:"absolute",zIndex:-1}}),(0,o.jsx)("h2",{style:{color:"white",padding:"12px",boxSizing:"border-box",paddingBottom:"0px",fontWeight:"500"},children:t}),(0,o.jsx)("p",{style:{color:"white",paddingTop:"0px",paddingBottom:"12px",paddingLeft:"12px",paddingRight:"12px",boxSizing:"border-box"},children:i})]})}},1151:(n,e,i)=>{i.d(e,{Z:()=>d,a:()=>s});var r=i(7294);const o={},t=r.createContext(o);function s(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);