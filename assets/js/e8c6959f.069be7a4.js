"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4228],{829:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var a=t(7462),i=(t(7294),t(3905)),r=t(814);const s={sidebar_position:2,description:"deadlock multhreading problem"},o="Multithread problem",d={unversionedId:"java/assignment/mulithreading",id:"java/assignment/mulithreading",title:"Multithread problem",description:"deadlock multhreading problem",source:"@site/docs/java/assignment/mulithreading.mdx",sourceDirName:"java/assignment",slug:"/java/assignment/mulithreading",permalink:"/docs/java/assignment/mulithreading",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"deadlock multhreading problem"},sidebar:"tutorialSidebar",previous:{title:"Shipment problem",permalink:"/docs/java/assignment/shipment"},next:{title:"Interface problem",permalink:"/docs/java/assignment/interface"}},l={},p=[{value:"CODE",id:"code",level:2}],c={toc:p};function m(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"multithread-problem"},"Multithread problem"),(0,i.kt)("h2",{id:"code"},"CODE"),(0,i.kt)(r.Z,{language:"java",mdxType:"CodeBlock"},'public class Deadlock {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new B();\n\n        Thread t = new Thread(new Runnable() {\n            public void run() {\n                a.foo(b);\n            }\n        });\n        b.bar(a);\n\n        t.start();\n    }\n}\n\nclass A {\n    synchronized void foo(B b) {\n        System.out.println("A.foo()");\n\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            System.out.println("A Interrupted");\n        }\n\n        System.out.println("B.last()");\n        b.last();\n    }\n\n    synchronized void last() {\n        System.out.println("Inside A.last");\n    }\n}\n\nclass B {\n    synchronized void bar(A a) {\n        System.out.println( "B.bar()");\n\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            System.out.println("B Interrupted");\n        }\n\n        System.out.println("A.last()");\n        a.last();\n    }\n\n    synchronized void last() {\n        System.out.println("Inside B.last");\n    }\n}'))}m.isMDXComponent=!0}}]);