"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[3667],{5412:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>f,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>u});var s=i(5893),e=i(1151),r=i(9286),o=i(6709);const a={sidebar_position:3,description:"Infix to Postfix Expressions"},c="Infix to Postfix Conversion",p={id:"Data Structures/stacks/postfix-convert",title:"Infix to Postfix Conversion",description:"Infix to Postfix Expressions",source:"@site/docs/two/Data Structures/stacks/postfix-convert.mdx",sourceDirName:"Data Structures/stacks",slug:"/Data Structures/stacks/postfix-convert",permalink:"/docs/two/Data Structures/stacks/postfix-convert",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Infix to Postfix Expressions"},sidebar:"tutorialSidebar",previous:{title:"Stack",permalink:"/docs/two/Data Structures/stacks/"},next:{title:"Postfix Evaluation",permalink:"/docs/two/Data Structures/stacks/postfix-evaluate"}},f={},u=[];function x(n){const t={h1:"h1",...(0,e.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"infix-to-postfix-conversion",children:"Infix to Postfix Conversion"}),"\n",(0,s.jsx)(r.Z,{language:"c",children:o.Z})]})}function d(n={}){const{wrapper:t}={...(0,e.a)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(x,{...n})}):x(n)}},6709:(n,t,i)=>{i.d(t,{Z:()=>s});const s='#include <stdio.h>\n#include <ctype.h>\n\nchar stack[100];\nint top = -1;\n\nvoid push(char x)\n{\n  top++;\n  stack[top] = x;\n}\n\nvoid display(char *ptr)\n{\n  printf("\\nElements in Stack:\\n");\n  for (int i = 0; i <= top; i++)\n  {\n    printf(" %d", *(ptr + i));\n  }\n}\n\nchar pop()\n{\n  if (top == -1)\n  {\n    printf("\\nUnderflow Error");\n    return -1;\n  }\n\n  else\n  {\n\n    return stack[top--];\n  }\n}\n\nint priority(char x)\n{\n  if (x == \'+\' || x == \'-\')\n  {\n    return 1;\n  }\n\n  if (x == \'*\' || x == \'/\' || x == \'%\')\n  {\n    return 2;\n  }\n  return 0;\n}\n\nint main()\n{\n  char exp[100];\n  char *e, x;\n  printf("Enter the expression : ");\n  scanf("%s", exp);\n  printf("\\n");\n  e = exp;\n\n  while (*e != \'\\0\')\n  {\n    if (isalnum(*e))\n    {\n      printf("%c ", *e);\n    }\n\n    else if (*e == \'(\')\n    {\n      push(*e);\n    }\n\n    else if (*e == \')\')\n    {\n      while ((x = pop()) != \'(\')\n      {\n        printf("%c ", x);\n      }\n    }\n    else\n    {\n      if (priority(*e) <= priority(stack[top]))\n      {\n        printf("%c ", pop());\n      }\n\n      push(*e);\n    }\n    e++;\n  }\n  while (top != -1)\n  {\n    printf("%c ", pop());\n  }\n\n  printf("\\n");\n  return 0;\n}\n'}}]);