"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[572],{2189:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>u});var o=t(7462),a=(t(7294),t(3905)),i=t(814);const r={sidebar_position:1,description:"Stack based Puzzle"},s="Tower of Hanoi",d={unversionedId:"stackAndQueue/hanoiTower",id:"stackAndQueue/hanoiTower",title:"Tower of Hanoi",description:"Stack based Puzzle",source:"@site/docs/stackAndQueue/hanoiTower.mdx",sourceDirName:"stackAndQueue",slug:"/stackAndQueue/hanoiTower",permalink:"/docs/stackAndQueue/hanoiTower",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Stack based Puzzle"},sidebar:"tutorialSidebar",previous:{title:"Stacks and Queues",permalink:"/docs/category/stacks-and-queues"},next:{title:"Stack",permalink:"/docs/stackAndQueue/stacks"}},c={},u=[],k={toc:u};function p(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,o.Z)({},k,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tower-of-hanoi"},"Tower of Hanoi"),(0,a.kt)("p",null,"Find a visual representation of solution of Tower of Hanoi ",(0,a.kt)("a",{parentName:"p",href:"https://yongdanielliang.github.io/animation/web/TowerOfHanoi.html"},"here")),(0,a.kt)(i.Z,{language:"c",mdxType:"CodeBlock"},'#include <stdio.h>\nint N;\n\n// HANOI FUNCTION\nvoid Hanoi(int N, char src, char dest, char aux)\n{\n    // CHECK IF ONE DISK PRESENT\n    if (N == 1)\n    {\n        printf("\\nMove disk 1 from rod %c to rod %c", src, dest);\n        return;\n    }\n    Hanoi(N - 1, src, aux, dest);\n    printf("\\nMove disk %d from rod %c to rod %c", N, src, dest);\n    Hanoi(N - 1, aux, dest, src);\n}\nint main()\n{\n    printf("Enter the number of Disks: ");\n    scanf("%d", &N);\n    printf("\\n");\n    printf("Moves:");\n    Hanoi(N, \'A\', \'C\', \'B\');\n    printf("\\n");\n\n    return 0;\n}'))}p.isMDXComponent=!0}}]);