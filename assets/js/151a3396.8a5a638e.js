"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[1534],{1069:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>j,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=i(5893),e=i(1151),o=i(9286);const a='// WAP to find product of user defined 2 arrays of size m,n\n\nimport java.util.Scanner;\n\npublic class ProdMat {\n    public static void main(String[] args) {\n        int m1, m2, n1, n2;\n        Scanner sc = new Scanner(System.in);\n        System.out.println("Enter the number of rows: ");\n        m1 = sc.nextInt();\n        System.out.println("Enter the number of columns: ");\n        n1 = sc.nextInt();\n        int mat1[][] = new int[m1][n1];\n        for (int i = 0; i < m1; i++) {\n            System.out.println("Enter the elements of row " + (i + 1) + ": ");\n            for (int j = 0; j < n1; j++)\n                mat1[i][j] = sc.nextInt();\n        }\n        System.out.println("Original matrix 1: ");\n        for (int i = 0; i < m1; i++) {\n            for (int j = 0; j < n1; j++)\n                System.out.print(mat1[i][j] + " ");\n            System.out.println();\n        }\n        System.out.println("Enter the number of rows: ");\n        m2 = sc.nextInt();\n        System.out.println("Enter the number of columns: ");\n        n2 = sc.nextInt();\n        int mat2[][] = new int[m2][n2];\n        for (int i = 0; i < m2; i++) {\n            System.out.println("Enter the elements of row " + (i + 1) + ": ");\n            for (int j = 0; j < n2; j++)\n                mat2[i][j] = sc.nextInt();\n        }\n        System.out.println("Original matrix 2: ");\n        for (int i = 0; i < m2; i++) {\n            for (int j = 0; j < n2; j++)\n                System.out.print(mat2[i][j] + " ");\n            System.out.println();\n        }\n        System.out.println("Product of matrices: ");\n        int mat3[][] = new int[m1][n2];\n        for (int i = 0; i < m1; i++)\n            for (int j = 0; j < n2; j++)\n                for (int k = 0; k < n1; k++)\n                    mat3[i][j] += mat1[i][k] * mat2[k][j];\n\n        for (int i = 0; i < m1; i++) {\n            for (int j = 0; j < n2; j++)\n                System.out.print(mat3[i][j] + " ");\n            System.out.println();\n        }\n\n    }\n}\n',s={sidebar_position:14,description:"Matrix Product in Java"},m="Matrix Product",c={id:"java/other/ProdMat",title:"Matrix Product",description:"Matrix Product in Java",source:"@site/docs/three/java/other/ProdMat.mdx",sourceDirName:"java/other",slug:"/java/other/ProdMat",permalink:"/docs/three/java/other/ProdMat",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14,description:"Matrix Product in Java"},sidebar:"tutorialSidebar",previous:{title:"Diagonal Sum Matrix",permalink:"/docs/three/java/other/DiagSum"},next:{title:"Thread methods",permalink:"/docs/three/java/other/Thread"}},u={},d=[{value:"CODE",id:"code",level:2}];function l(n){const t={h1:"h1",h2:"h2",...(0,e.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"matrix-product",children:"Matrix Product"}),"\n",(0,r.jsx)(t.h2,{id:"code",children:"CODE"}),"\n",(0,r.jsx)(o.Z,{language:"java",children:a})]})}function j(n={}){const{wrapper:t}={...(0,e.a)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}}}]);