"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[819],{3846:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>f,contentTitle:()=>c,default:()=>u,frontMatter:()=>p,metadata:()=>a,toc:()=>x});var i=e(7462),s=(e(7294),e(3905)),o=e(814),r=e(3542);const p={sidebar_position:3,description:"Infix to Postfix Expressions"},c="Infix to Postfix Conversion",a={unversionedId:"stacks/postfix-convert",id:"stacks/postfix-convert",title:"Infix to Postfix Conversion",description:"Infix to Postfix Expressions",source:"@site/docs/stacks/postfix-convert.mdx",sourceDirName:"stacks",slug:"/stacks/postfix-convert",permalink:"/docs/stacks/postfix-convert",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Infix to Postfix Expressions"},sidebar:"tutorialSidebar",previous:{title:"Stack",permalink:"/docs/stacks/"},next:{title:"Postfix Evaluation",permalink:"/docs/stacks/postfix-evaluate"}},f={},x=[],d={toc:x};function u(n){let{components:t,...e}=n;return(0,s.kt)("wrapper",(0,i.Z)({},d,e,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"infix-to-postfix-conversion"},"Infix to Postfix Conversion"),(0,s.kt)(o.Z,{language:"c",mdxType:"CodeBlock"},r.Z))}u.isMDXComponent=!0},3542:(n,t,e)=>{e.d(t,{Z:()=>i});const i="#include <stdio.h>\n#include <ctype.h>\n\nchar stack[100];\nint top = -1;\n\nvoid push(char x)\n{\n    top++;\n    stack[top] = x;\n}\n\nchar pop()\n{\n    if (top == -1)\n    {\n        printf(\"\\nUnderflow Error\");\n        return -1;\n    }\n\n    else\n    {\n\n        return stack[top--];\n    }\n}\n\nint priority(char x)\n{\n    if (x == '(')\n    {\n        return 0;\n    }\n\n    if (x == '+' || x == '-')\n    {\n        return 1;\n    }\n\n    if (x == '*' || x == '/' || x == '%')\n    {\n        return 2;\n    }\n    return 0;\n}\n\nint main()\n{\n    char exp[100];\n    char *e, x;\n    printf(\"Enter the expression : \");\n    scanf(\"%s\", exp);\n    printf(\"\\n\");\n    e = exp;\n\n    while (*e != '\\0')\n    {\n        if (isalnum(*e))\n        {\n            printf(\"%c \", *e);\n        }\n\n        else if (*e == '(')\n        {\n            push(*e);\n        }\n\n        else if (*e == ')')\n        {\n            while ((x = pop()) != '(')\n            {\n                printf(\"%c \", x);\n            }\n        }\n        else\n        {\n            while (priority(stack[top]) >= priority(*e))\n            {\n                printf(\"%c \", pop());\n            }\n            push(*e);\n        }\n        e++;\n    }\n\n    while (top != -1)\n    {\n        printf(\"%c \", pop());\n    }\n    printf(\"\\n\");\n    return 0;\n}"}}]);