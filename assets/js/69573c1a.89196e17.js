"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[6260],{2839:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>u,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Data Structures/basics/recursion","title":"Recursion","description":"function calls itself","source":"@site/docs/two/Data Structures/basics/recursion.mdx","sourceDirName":"Data Structures/basics","slug":"/Data Structures/basics/recursion","permalink":"/docs/two/Data Structures/basics/recursion","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"function calls itself"},"sidebar":"tutorialSidebar","previous":{"title":"Arrays","permalink":"/docs/two/Data Structures/basics/arrays"},"next":{"title":"Stacks","permalink":"/docs/two/category/stacks"}}');var t=i(4848),r=i(8453),o=i(1432);const c="#include <stdio.h>\nvoid recurse()\n{\n    // Body that will contain the termination condition\n    recurse();\n}\nint main()\n{\n    recurse();\n    return 0;\n}",a={sidebar_position:2,description:"function calls itself"},u="Recursion",d={},l=[{value:"Definintion",id:"definintion",level:2}];function h(n){const e={a:"a",admonition:"admonition",h1:"h1",h2:"h2",header:"header",p:"p",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"recursion",children:"Recursion"})}),"\n",(0,t.jsx)(e.h2,{id:"definintion",children:"Definintion"}),"\n",(0,t.jsx)(e.p,{children:"when a function calls itself from its body, the function is said to be a recursive function."}),"\n",(0,t.jsx)(e.admonition,{type:"note",children:(0,t.jsx)(e.p,{children:"Recursive functions should always have a termination condition else the function calls itself infinitely."})}),"\n",(0,t.jsx)(o.A,{language:"c",children:c}),"\n",(0,t.jsxs)(e.p,{children:["Find Recursion programs here:",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(e.a,{href:"https://github.com/TejasBhovad/c-programs/blob/master/recursion/recursion.md",children:"https://github.com/TejasBhovad/c-programs/recursion"})]})]})}function f(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}}}]);