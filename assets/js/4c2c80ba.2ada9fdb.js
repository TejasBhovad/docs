"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[9137],{4853:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=i(5893),e=i(1151);const o={},s="Strings in C",c={id:"c/string/string",title:"Strings in C",description:"1. WAP to check if a string is palindrome or not",source:"@site/docs/one/c/string/string.md",sourceDirName:"c/string",slug:"/c/string/",permalink:"/docs/one/c/string/",draft:!1,unlisted:!1,editUrl:"https://github.com/TejasBhovad/docs/docs/one/c/string/string.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Recursion in C",permalink:"/docs/one/c/recursion/"}},a={},l=[{value:"1. WAP to check if a string is palindrome or not",id:"1-wap-to-check-if-a-string-is-palindrome-or-not",level:3},{value:"2. WAP to perform string operations without string function",id:"2-wap-to-perform-string-operations-without-string-function",level:3}];function d(n){const t={code:"code",h1:"h1",h3:"h3",pre:"pre",...(0,e.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"strings-in-c",children:"Strings in C"}),"\n",(0,r.jsx)(t.h3,{id:"1-wap-to-check-if-a-string-is-palindrome-or-not",children:"1. WAP to check if a string is palindrome or not"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:'#include <stdio.h>\n#include <string.h>\nint main()\n{\n   char str[20];\n   char rev[20];\n   // int flag = 0;\n   printf("Enter String: ");\n   scanf("%s", str);\n   int n;       // to store length of str\n   int ctr = 0; // to store the index of reverse string\n\n   // find length of String\n   for (n = 0; str[n] != \'\\0\'; n++)\n       ;\n   // Alternatively,\n   // int n = strlen(str); [USING STRING FUNCTIONS]\n\n   // Finding Reverse of String\n   for (int i = n - 1; i >= 0; i--)\n   {\n       rev[i] = str[ctr];\n       ctr++;\n       // Alternatively,\n       // check if rev[i]==ctr[i] & if not increment flag\n       // at the end check if flag==0 which would indicate String being palindrome\n   }\n\n   // comparing two string / checking equality\n   if (strcmp(str, rev) == 0)\n   {\n       printf("The String is Palindrome");\n   }\n   else\n   {\n       printf("The String is not Palindrome");\n   }\n   printf("\\n");\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"2-wap-to-perform-string-operations-without-string-function",children:"2. WAP to perform string operations without string function"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"#include <stdio.h>\nint main()\n{\n    char str_1[10], str_2[10], str_3[10];\n    printf(\"Enter String 1: \");\n    scanf(\"%s\", str_1);\n    int i = 0;\n\n    // Copying value of string from str_1 to str_2\n    while (str_1[i] != '\\0')\n    {\n        str_2[i] = str_1[i];\n\n        if (str_1[i + 1] == '\\0')\n        {\n            i++;\n            str_2[i] = '\\0';\n        }\n        i++;\n    }\n    printf(\"\\n\");\n    // For concatenation: https://beginnersbook.com/2015/02/c-program-to-concatenate-two-strings-without-using-strcat/\n}\n\n"})})]})}function g(n={}){const{wrapper:t}={...(0,e.a)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},1151:(n,t,i)=>{i.d(t,{Z:()=>c,a:()=>s});var r=i(7294);const e={},o=r.createContext(e);function s(n){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function c(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(e):n.components||e:s(n.components),r.createElement(o.Provider,{value:t},n.children)}}}]);