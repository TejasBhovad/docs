"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[351],{6034:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>p,default:()=>x,frontMatter:()=>a,metadata:()=>u,toc:()=>f});var i=t(7462),o=(t(7294),t(3905)),s=t(814),r=t(1574);const a={sidebar_position:4,description:"Evaluate Postfix Expressions"},p="Postfix Evaluation",u={unversionedId:"journal/postfix-evaluate",id:"journal/postfix-evaluate",title:"Postfix Evaluation",description:"Evaluate Postfix Expressions",source:"@site/docs/journal/postfix-evaluate.mdx",sourceDirName:"journal",slug:"/journal/postfix-evaluate",permalink:"/docs/journal/postfix-evaluate",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Evaluate Postfix Expressions"},sidebar:"tutorialSidebar",previous:{title:"Infix to Postfix",permalink:"/docs/journal/infix-postfix"},next:{title:"Linear Queues",permalink:"/docs/journal/linear-queues"}},l={},f=[],c={toc:f};function x(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,i.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"postfix-evaluation"},"Postfix Evaluation"),(0,o.kt)(s.Z,{language:"c",mdxType:"CodeBlock"},r.Z))}x.isMDXComponent=!0},1574:(n,e,t)=>{t.d(e,{Z:()=>i});const i="#include <stdio.h>\n#include <ctype.h>\n\nchar stack[100];\nint top = -1;\n\nvoid push(char x)\n{\n    top++;\n    stack[top] = x;\n}\n\nchar pop()\n{\n    if (top == -1)\n    {\n        printf(\"\\nUnderflow Error\");\n        return -1;\n    }\n\n    else\n    {\n\n        return stack[top--];\n    }\n}\n\nint priority(char x)\n{\n    if (x == '(')\n    {\n        return 0;\n    }\n\n    if (x == '+' || x == '-')\n    {\n        return 1;\n    }\n\n    if (x == '*' || x == '/')\n    {\n        return 2;\n    }\n    return 0;\n}\n\nint main()\n{\n    char exp[100];\n    char *e, x;\n    int num;\n    printf(\"Enter the expression : \");\n    scanf(\"%s\", exp);\n    printf(\"\\n\");\n    e = exp;\n\n    while (*e != '\\0')\n    {\n        if (isdigit(*e))\n        {\n            // typecasting\n            num = *e - '0';\n            push(num);\n        }\n        else\n        {\n            int result;\n            int op1 = (int)pop();\n            int op2 = (int)pop();\n            if (*e == '+')\n            {\n                result = op2 + op1;\n            }\n            else if (*e == '-')\n            {\n                result = op2 - op1;\n            }\n            else if (*e == '*')\n            {\n                result = op2 * op1;\n            }\n            else if (*e == '/')\n            {\n                result = op2 / op1;\n            }\n            else if (*e == '%')\n            {\n                result = op2 % op1;\n            }\n            else if (*e == '^')\n            {\n                result = op2 ^ op1;\n            }\n            push((char)result);\n        }\n        e++;\n    }\n\n    printf(\"\\nThe result of expression %s  =  %d\\n\\n\", exp, pop());\n    printf(\"\\n\");\n    return 0;\n}"}}]);