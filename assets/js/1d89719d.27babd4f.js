"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[6214],{1457:(n,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>p,metadata:()=>e,toc:()=>f});const e=JSON.parse('{"id":"algorithms/knapsack","title":"Knapsack problem","description":"Knapsack problem in C","source":"@site/docs/three/algorithms/knapsack.mdx","sourceDirName":"algorithms","slug":"/algorithms/knapsack","permalink":"/docs/three/algorithms/knapsack","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"description":"Knapsack problem in C"},"sidebar":"tutorialSidebar","previous":{"title":"Quick Sort","permalink":"/docs/three/algorithms/quickSort"},"next":{"title":"Dijkstras Alogrithm","permalink":"/docs/three/algorithms/dijkstras"}}');var r=t(4848),a=t(8453),s=t(1432);const o='// WAP to create a knapsack problem using greedy method.\n#include <stdio.h>\nint main()\n{\n    int n, i, j;\n    printf("Enter the number of items: ");\n    scanf("%d", &n);\n    float w[n], p[n], r[n], x[n];\n    printf("Enter the weights of the items: \\n");\n    for (i = 0; i < n; i++)\n        scanf("%f", &w[i]);\n    printf("Enter the profits of the items: \\n");\n    for (i = 0; i < n; i++)\n        scanf("%f", &p[i]);\n    printf("Enter the capacity of the knapsack: ");\n    float cap;\n    scanf("%f", &cap);\n    // calculating the ratio\n    for (i = 0; i < n; i++)\n        r[i] = p[i] / w[i];\n\n    // sort the ratio\n    for (i = 0; i < n; i++)\n    {\n        for (j = i + 1; j < n; j++)\n        {\n            if (r[i] < r[j])\n            {\n                int temp = r[i];\n                r[i] = r[j];\n                r[j] = temp;\n                temp = w[i];\n                w[i] = w[j];\n                w[j] = temp;\n                temp = p[i];\n                p[i] = p[j];\n                p[j] = temp;\n            }\n        }\n    }\n    // knapsack logic fractional\n    float tp = 0;\n    for (i = 0; i < n; i++)\n        x[i] = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (w[i] > cap)\n            break;\n        else\n        {\n            x[i] = 1;\n            tp += p[i];\n            cap -= w[i];\n        }\n    }\n    if (i < n)\n    {\n        x[i] = cap / w[i];\n        tp += x[i] * p[i];\n    }\n    printf("The solution vector is: ");\n    for (i = 0; i < n; i++)\n        printf("%.2f ", x[i]);\n    printf("\\nThe total profit is: %.2f\\n", tp);\n    return 0;\n}',p={sidebar_position:8,description:"Knapsack problem in C"},c="Knapsack problem",l={},f=[{value:"CODE",id:"code",level:2}];function h(n){const i={h1:"h1",h2:"h2",header:"header",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"knapsack-problem",children:"Knapsack problem"})}),"\n",(0,r.jsx)(i.h2,{id:"code",children:"CODE"}),"\n",(0,r.jsx)(s.A,{language:"c",children:o})]})}function d(n={}){const{wrapper:i}={...(0,a.R)(),...n.components};return i?(0,r.jsx)(i,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}}}]);