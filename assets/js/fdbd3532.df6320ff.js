"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1929],{6811:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>d,metadata:()=>o,toc:()=>h});var i=r(7462),a=(r(7294),r(3905)),t=r(814),c=r(235);const d={sidebar_position:1,description:"Binary Search"},s="Binary Search [ WHILE ]",o={unversionedId:"c/BinarySearch/BS",id:"c/BinarySearch/BS",title:"Binary Search [ WHILE ]",description:"Binary Search",source:"@site/docs/c/BinarySearch/BS.mdx",sourceDirName:"c/BinarySearch",slug:"/c/BinarySearch/BS",permalink:"/docs/c/BinarySearch/BS",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Binary Search"},sidebar:"tutorialSidebar",previous:{title:"Binary Search",permalink:"/docs/category/binary-search"},next:{title:"Binary Search [ RECURSION ]",permalink:"/docs/c/BinarySearch/recursion"}},l={},h=[],f={toc:h};function m(n){let{components:e,...r}=n;return(0,a.kt)("wrapper",(0,i.Z)({},f,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"binary-search--while-"},"Binary Search ","[ WHILE ]"),(0,a.kt)(t.Z,{language:"c",mdxType:"CodeBlock"},c.Z))}m.isMDXComponent=!0},235:(n,e,r)=>{r.d(e,{Z:()=>i});const i='#include <stdio.h>\nint N, key, ar[100];\nint bSearch()\n{\n    int beg, mid, end;\n    beg = 0;\n    end = N;\n    int flag = 0;\n    mid = (beg + end) / 2;\n    while (end >= mid)\n    {\n\n        if (key == ar[mid])\n        {\n            flag = 1;\n            printf("Index: %d", mid);\n            return 1;\n        }\n        else if (key > ar[mid])\n        {\n            beg = mid + 1;\n            mid = (beg + end) / 2;\n        }\n        else\n        {\n            end = mid-1;\n            mid = (beg + end) / 2;\n        }\n    }\n    return flag;\n}\nint main()\n{\n    printf("\\nEnter Size of Array: \\n");\n    scanf("%d", &N);\n    for (int i = 0; i < N; i++)\n    {\n        printf("Enter Element(%d): ", i);\n        scanf("%d", &ar[i]);\n    }\n    printf("\\nEnter Element to be searched: ");\n    scanf("%d", &key);\n    if (bSearch())\n    {\n        printf("\\nElement found\\n");\n    }\n    else\n    {\n        printf("\\nElement Not found\\n");\n    }\n    return 0;\n}\n'}}]);