"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[1696],{951:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>v,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"java/Inheritance","title":"Inheritance","description":"Multilevel Inheritance in Java","source":"@site/docs/three/java/Inheritance.mdx","sourceDirName":"java","slug":"/java/Inheritance","permalink":"/docs/three/java/Inheritance","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"description":"Multilevel Inheritance in Java"},"sidebar":"tutorialSidebar","previous":{"title":"Palindrome","permalink":"/docs/three/java/Palindrome"},"next":{"title":"Interfaces","permalink":"/docs/three/java/Interface"}}');var t=a(4848),r=a(8453),s=a(1432);const c='// WAP to show multilevel inheritance\n\npublic class Inheritance {\n    public static void main(String args[]) {\n        C c = new C();\n        c.getRadius(5);\n        c.calcVolume();\n        c.displayVolume();\n    }\n}\n\nclass A {\n    int radius;\n    double volume;\n}\n\nclass B extends A {\n    void getRadius(int r) {\n        radius = r;\n    }\n}\n\nclass C extends B {\n\n    void calcVolume() {\n        volume = 4 / 3 * 3.14 * radius * radius * radius;\n    }\n\n    void displayVolume() {\n        System.out.println("Volume of sphere is " + volume);\n    }\n\n}\n',l={sidebar_position:8,description:"Multilevel Inheritance in Java"},o="Inheritance",d={},u=[{value:"CODE",id:"code",level:2}];function h(e){const n={h1:"h1",h2:"h2",header:"header",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"inheritance",children:"Inheritance"})}),"\n",(0,t.jsx)(n.h2,{id:"code",children:"CODE"}),"\n",(0,t.jsx)(s.A,{language:"java",children:c})]})}function v(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);