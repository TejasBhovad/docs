"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[665],{891:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>u,contentTitle:()=>d,default:()=>f,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var t=r(5893),a=r(1151),i=r(9286),s=r(1051);const c={sidebar_position:7,description:"Binary Search Tree Operations"},d="Binary Search",o={id:"Data Structures/journal/BinarySearch",title:"Binary Search",description:"Binary Search Tree Operations",source:"@site/docs/two/Data Structures/journal/BinarySearch.mdx",sourceDirName:"Data Structures/journal",slug:"/Data Structures/journal/BinarySearch",permalink:"/docs/two/Data Structures/journal/BinarySearch",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,description:"Binary Search Tree Operations"},sidebar:"tutorialSidebar",previous:{title:"Binary Search Tree",permalink:"/docs/two/Data Structures/journal/BST"},next:{title:"Hash Tables",permalink:"/docs/two/Data Structures/journal/hash"}},u={},l=[];function h(n){const e={h1:"h1",...(0,a.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"binary-search",children:"Binary Search"}),"\n",(0,t.jsx)(i.Z,{language:"c",children:s.Z})]})}function f(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}},1051:(n,e,r)=>{r.d(e,{Z:()=>t});const t='#include <stdio.h>\nint N, key, ar[100];\nint bSearch()\n{\n    int beg, mid, end;\n    beg = 0;\n    end = N;\n    int flag = 0;\n    mid = (beg + end) / 2;\n    while (end >= mid)\n    {\n\n        if (key == ar[mid])\n        {\n            flag = 1;\n            printf("Index: %d", mid);\n            return 1;\n        }\n        else if (key > ar[mid])\n        {\n            beg = mid + 1;\n            mid = (beg + end) / 2;\n        }\n        else\n        {\n            end = mid-1;\n            mid = (beg + end) / 2;\n        }\n    }\n    return flag;\n}\nint main()\n{\n    printf("\\nEnter Size of Array: \\n");\n    scanf("%d", &N);\n    for (int i = 0; i < N; i++)\n    {\n        printf("Enter Element(%d): ", i);\n        scanf("%d", &ar[i]);\n    }\n    printf("\\nEnter Element to be searched: ");\n    scanf("%d", &key);\n    if (bSearch())\n    {\n        printf("\\nElement found\\n");\n    }\n    else\n    {\n        printf("\\nElement Not found\\n");\n    }\n    return 0;\n}\n'}}]);