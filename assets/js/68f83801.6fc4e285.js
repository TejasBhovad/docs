"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[505],{3576:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var a=i(7462),t=(i(7294),i(3905)),r=i(814),s=i(1160);const o={sidebar_position:7,description:"Hash Tables"},l="Hash Tables",d={unversionedId:"journal/hash",id:"journal/hash",title:"Hash Tables",description:"Hash Tables",source:"@site/docs/journal/hash.mdx",sourceDirName:"journal",slug:"/journal/hash",permalink:"/docs/c/journal/hash",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,description:"Hash Tables"},sidebar:"tutorialSidebar",previous:{title:"Binary Search",permalink:"/docs/c/journal/BinarySearch"},next:{title:"Graphs Traversal",permalink:"/docs/c/journal/DFS_BFS"}},c={},h=[],f={toc:h};function p(n){let{components:e,...i}=n;return(0,t.kt)("wrapper",(0,a.Z)({},f,i,{components:e,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"hash-tables"},"Hash Tables"),(0,t.kt)(r.Z,{language:"c",mdxType:"CodeBlock"},s.Z))}p.isMDXComponent=!0},1160:(n,e,i)=>{i.d(e,{Z:()=>a});const a='#include <stdio.h>\nint main()\n{\n    int N;\n    printf("\\nEnter Value of N:");\n    scanf("%d", &N);\n    int ar[N];\n    for (int i = 0; i < N; i++)\n    {\n        ar[i] = 0;\n    }\n\n    int index, ch;\n\n    do\n    {\n        printf("\\nEnter choice:");\n        printf("\\n1. Insert:");\n        printf("\\n2. Display:");\n        printf("\\n3. Search:");\n        printf("\\n4. Exit:\\n");\n        scanf("%d", &ch);\n        switch (ch)\n        {\n        case 1:\n        {\n            int key, flag = 0;\n            printf("\\nEnter the Key Element:");\n            scanf("%d", &key);\n            int h_key = key % N;\n            for (int i = 0; i < N; i++)\n            {\n                index = (h_key + i) % N;\n                if (ar[index] == 0)\n                {\n                    ar[index] = key;\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0)\n            {\n                printf("\\nHash Table is Full");\n            }\n\n            break;\n        }\n        case 2:\n        {\n            for (int i = 0; i < N; i++)\n            {\n                printf("\\n%d ", ar[i]);\n            }\n            break;\n        }\n        case 3:\n        {\n            int key, flag = 0;\n            printf("\\nEnter the Key Element:");\n            scanf("%d", &key);\n            int h_key = key % N;\n            for (int i = 0; i < N; i++)\n            {\n                index = (h_key + i) % N;\n                if (ar[index] == key)\n                {\n                    printf("\\nElement %d found at index %d", key, index);\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0)\n            {\n                printf("\\nHash Table is Full");\n            }\n            break;\n        }\n        default:\n            break;\n        }\n    } while (ch != 4);\n\n    return 0;\n}\n'}}]);