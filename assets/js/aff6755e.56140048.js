"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[7660],{8398:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>m,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"java/assignment/palindrome","title":"Palindrome problem","description":"Palindrome problem","source":"@site/docs/three/java/assignment/palindrome.mdx","sourceDirName":"java/assignment","slug":"/java/assignment/palindrome","permalink":"/docs/three/java/assignment/palindrome","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"description":"Palindrome problem"},"sidebar":"tutorialSidebar","previous":{"title":"Exception problem","permalink":"/docs/three/java/assignment/exception"},"next":{"title":"GUI problem","permalink":"/docs/three/java/assignment/gui"}}');var t=r(4848),s=r(8453),a=r(1432);const o='// WAP to check if a string is palindrome or not using string buffer\nclass Palindrome {\n    public static void main(String args[]) {\n        String str = "madam";\n        StringBuffer sb = new StringBuffer(str);\n        String rev = sb.reverse().toString();\n        if (str.equals(rev))\n            System.out.println("Palindrome");\n        else\n            System.out.println("Not Palindrome");\n    }\n}\n',l={sidebar_position:5,description:"Palindrome problem"},d="Palindrome problem",m={},c=[{value:"CODE",id:"code",level:2}];function p(e){const n={h1:"h1",h2:"h2",header:"header",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"palindrome-problem",children:"Palindrome problem"})}),"\n",(0,t.jsx)(n.h2,{id:"code",children:"CODE"}),"\n",(0,t.jsx)(a.A,{language:"java",children:o})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);