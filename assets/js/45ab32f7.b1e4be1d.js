"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[8581],{7453:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var o=r(5893),t=r(1151),s=r(9163);const i={title:"Producer Consumer Problem",sidebar_position:8,description:"fork command"},c="Operating System",d={id:"os/producer",title:"Producer Consumer Problem",description:"fork command",source:"@site/docs/four/os/producer.mdx",sourceDirName:"os",slug:"/os/producer",permalink:"/docs/four/os/producer",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Producer Consumer Problem",sidebar_position:8,description:"fork command"},sidebar:"tutorialSidebar",previous:{title:"Fork Processes",permalink:"/docs/four/os/forktoo"},next:{title:"Page replacenent Algorithm",permalink:"/docs/four/os/page"}},u={},a=[{value:"Producer Consumer Problem",id:"producer-consumer-problem",level:2},{value:"Questions",id:"questions",level:2}];function h(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"operating-system",children:(0,o.jsx)(s.Z,{name:"banner",description:"Producer Consumer",children:"Operating System"})}),"\n",(0,o.jsx)(n.h2,{id:"producer-consumer-problem",children:"Producer Consumer Problem"}),"\n",(0,o.jsx)(n.p,{children:"Producer Consumer Problem is a synchronization problem where there are two processes, a producer and a consumer, sharing a common buffer. The producer produces data and puts it into the buffer, and the consumer consumes the data from the buffer. The problem arises when the producer produces data faster than the consumer can consume it, or the consumer consumes data faster than the producer can produce it."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include <stdlib.h>\n\n#define BUFFER_SIZE 3\n\nint buffer[BUFFER_SIZE];\nint in = 0, out = 0;\nint mutex = 1;\n\nvoid producer() {\n    while (in == (out + 1) % BUFFER_SIZE) {\n        printf("Buffer is full!\\n");\n    }\n\n    mutex--;\n\n    int item = rand() % 100;\n    buffer[in] = item;\n    in = (in + 1) % BUFFER_SIZE;\n\n    printf("Producer produced item %d\\n", item);\n\n    mutex++;\n}\n\nvoid consumer() {\n    while (in == out) {\n        printf("Buffer is empty!\\n");\n    }\n\n    mutex--;\n\n    int item = buffer[out];\n    out = (out + 1) % BUFFER_SIZE;\n\n    printf("Consumer consumed item %d\\n", item);\n\n    mutex++;\n}\n\nint main() {\n    while (1) {\n        int choice;\n        printf("\\n1. Producer\\n2. Consumer\\n3. Exit\\n");\n        printf("Enter your choice: ");\n        scanf("%d", &choice);\n\n        switch (choice) {\n            case 1:\n                producer();\n                break;\n            case 2:\n                consumer();\n                break;\n            case 3:\n                exit(0);\n            default:\n                printf("Invalid choice!\\n");\n        }\n    }\n\n    return 0;\n}\n\n'})}),"\n",(0,o.jsxs)(n.p,{children:["To compile and run the program, use the following commands(dont copy the ",(0,o.jsx)(n.code,{children:"$"})," sign, it represents the terminal prompt):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ gcc producer_consumer.c -o producer_consumer\n$ ./producer_consumer\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"This will create a producer and consumer process that share a common buffer. The producer produces data and puts it into the buffer, and the consumer consumes the data from the buffer."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"questions",children:"Questions"}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"What is the Producer Consumer Problem?"}),(0,o.jsx)("div",{children:(0,o.jsx)(n.p,{children:"Producer Consumer Problem is a synchronization problem where there are two\nprocesses, a producer and a consumer, sharing a common buffer. The producer\nproduces data and puts it into the buffer, and the consumer consumes the\ndata from the buffer."})})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsxs)("summary",{children:["What is the use of ",(0,o.jsx)(n.code,{children:"mutex"}),"?"]}),(0,o.jsx)("div",{children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"mutex"})," is used to provide mutual exclusion between the producer and\nconsumer processes. It ensures that only one process can access the buffer\nat a time."]})})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsxs)("summary",{children:["What is the use of ",(0,o.jsx)(n.code,{children:"rand"})," function?"]}),(0,o.jsx)("div",{children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"rand"})," function is used to generate a random number. In the program, it is\nused to generate a random item to be produced by the producer."]})})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsxs)("summary",{children:["What is the use of ",(0,o.jsx)(n.code,{children:"exit"})," function?"]}),(0,o.jsx)("div",{children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"exit"})," function is used to terminate the program. In the program, it is used\nto exit the program when the user chooses to exit."]})})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"What is the output of the program?"}),(0,o.jsx)("div",{children:(0,o.jsx)(n.p,{children:"The program will create a producer and consumer process that share a common\nbuffer. The producer produces data and puts it into the buffer, and the\nconsumer consumes the data from the buffer."})})]})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},9163:(e,n,r)=>{r.d(n,{Z:()=>s});r(7294);var o=r(4996),t=r(5893);const s=e=>{let{name:n,description:r,children:s}=e;const i=(0,o.ZP)(`/images/${n}.jpg`);return(0,t.jsxs)("div",{style:{display:"inline-block",height:"150px",width:"100%",position:"relative",overflow:"hidden",borderRadius:"5px"},children:[(0,t.jsx)("img",{src:i,alt:i,style:{width:"100%",height:"100%",objectFit:"cover",position:"absolute",zIndex:-1}}),(0,t.jsx)("h2",{style:{color:"white",padding:"12px",boxSizing:"border-box",paddingBottom:"0px",fontWeight:"500"},children:s}),(0,t.jsx)("p",{style:{color:"white",paddingTop:"0px",paddingBottom:"12px",paddingLeft:"12px",paddingRight:"12px",boxSizing:"border-box"},children:r})]})}},1151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>i});var o=r(7294);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);