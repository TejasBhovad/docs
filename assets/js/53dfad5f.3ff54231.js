"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[967],{7118:(i,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>b});const r=JSON.parse('{"id":"java/other/Fibonnaci","title":"Fibonacci series","description":"Fibonacci series in Java","source":"@site/docs/three/java/other/Fibonnaci.mdx","sourceDirName":"java/other","slug":"/java/other/Fibonnaci","permalink":"/docs/three/java/other/Fibonnaci","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"description":"Fibonacci series in Java"},"sidebar":"tutorialSidebar","previous":{"title":"Factorial","permalink":"/docs/three/java/other/Factorial"},"next":{"title":"Count Digits","permalink":"/docs/three/java/other/Digits"}}');var t=e(4848),a=e(8453),s=e(1432);const c='// WAP to print fibonacci series using recursion\npublic class Fibonacci {\n    int fib(int n) {\n        if (n == 0)\n            return 0;\n        else if (n == 1)\n            return 1;\n\n        return fib(n - 1) + fib(n - 2);\n    }\n\n    public static void main(String[] args) {\n        Fibonacci f = new Fibonacci();\n        System.out.println("Fibonacci series: ");\n        for (int i = 0; i < 10; i++)\n            System.out.print(f.fib(i)+" ");\n    }\n}\n',o={sidebar_position:7,description:"Fibonacci series in Java"},d="Fibonacci series",l={},b=[{value:"CODE",id:"code",level:2}];function h(i){const n={h1:"h1",h2:"h2",header:"header",...(0,a.R)(),...i.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"fibonacci-series",children:"Fibonacci series"})}),"\n",(0,t.jsx)(n.h2,{id:"code",children:"CODE"}),"\n",(0,t.jsx)(s.A,{language:"java",children:c})]})}function u(i={}){const{wrapper:n}={...(0,a.R)(),...i.components};return n?(0,t.jsx)(n,{...i,children:(0,t.jsx)(h,{...i})}):h(i)}}}]);