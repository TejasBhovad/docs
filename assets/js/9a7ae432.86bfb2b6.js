"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[6337],{9806:(n,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>l,frontMatter:()=>p,metadata:()=>i,toc:()=>f});const i=JSON.parse('{"id":"Data Structures/journal/infix-postfix","title":"Infix to Postfix","description":"Convert Infix to Postfix Expression","source":"@site/docs/two/Data Structures/journal/infix-postfix.mdx","sourceDirName":"Data Structures/journal","slug":"/Data Structures/journal/infix-postfix","permalink":"/docs/two/Data Structures/journal/infix-postfix","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"description":"Convert Infix to Postfix Expression"},"sidebar":"tutorialSidebar","previous":{"title":"Stacks","permalink":"/docs/two/Data Structures/journal/stack"},"next":{"title":"Circular Queues","permalink":"/docs/two/Data Structures/journal/circular-queues"}}');var e=r(4848),s=r(8453),o=r(1432),a=r(4748);const p={sidebar_position:3,description:"Convert Infix to Postfix Expression"},c="Infix to Postfix",u={},f=[];function x(n){const t={h1:"h1",header:"header",...(0,s.R)(),...n.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.header,{children:(0,e.jsx)(t.h1,{id:"infix-to-postfix",children:"Infix to Postfix"})}),"\n",(0,e.jsx)(o.A,{language:"c",children:a.A})]})}function l(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,e.jsx)(t,{...n,children:(0,e.jsx)(x,{...n})}):x(n)}},4748:(n,t,r)=>{r.d(t,{A:()=>i});const i='#include <stdio.h>\n#include <ctype.h>\n\nchar stack[100];\nint top = -1;\n\nvoid push(char x)\n{\n  top++;\n  stack[top] = x;\n}\n\nvoid display(char *ptr)\n{\n  printf("\\nElements in Stack:\\n");\n  for (int i = 0; i <= top; i++)\n  {\n    printf(" %d", *(ptr + i));\n  }\n}\n\nchar pop()\n{\n  if (top == -1)\n  {\n    printf("\\nUnderflow Error");\n    return -1;\n  }\n\n  else\n  {\n\n    return stack[top--];\n  }\n}\n\nint priority(char x)\n{\n  if (x == \'+\' || x == \'-\')\n  {\n    return 1;\n  }\n\n  if (x == \'*\' || x == \'/\' || x == \'%\')\n  {\n    return 2;\n  }\n  return 0;\n}\n\nint main()\n{\n  char exp[100];\n  char *e, x;\n  printf("Enter the expression : ");\n  scanf("%s", exp);\n  printf("\\n");\n  e = exp;\n\n  while (*e != \'\\0\')\n  {\n    if (isalnum(*e))\n    {\n      printf("%c ", *e);\n    }\n\n    else if (*e == \'(\')\n    {\n      push(*e);\n    }\n\n    else if (*e == \')\')\n    {\n      while ((x = pop()) != \'(\')\n      {\n        printf("%c ", x);\n      }\n    }\n    else\n    {\n      if (priority(*e) <= priority(stack[top]))\n      {\n        printf("%c ", pop());\n      }\n\n      push(*e);\n    }\n    e++;\n  }\n  while (top != -1)\n  {\n    printf("%c ", pop());\n  }\n\n  printf("\\n");\n  return 0;\n}\n'}}]);