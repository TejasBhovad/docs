"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[3971],{9318:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"java/Palindrome","title":"Palindrome","description":"Matrix","source":"@site/docs/three/java/Palindrome.mdx","sourceDirName":"java","slug":"/java/Palindrome","permalink":"/docs/three/java/Palindrome","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"description":"Matrix"},"sidebar":"tutorialSidebar","previous":{"title":"Matrix","permalink":"/docs/three/java/Matrix"},"next":{"title":"Inheritance","permalink":"/docs/three/java/Inheritance"}}');var i=n(4848),a=n(8453),s=n(1432);const o='// WAP to check if a string is palindrome or not using string buffer\nclass Palindrome {\n    public static void main(String args[]) {\n        String str = "madam";\n        StringBuffer sb = new StringBuffer(str);\n        String rev = sb.reverse().toString();\n        if (str.equals(rev))\n            System.out.println("Palindrome");\n        else\n            System.out.println("Not Palindrome");\n    }\n}\n',d={sidebar_position:7,description:"Matrix"},l="Palindrome",c={},m=[{value:"CODE",id:"code",level:2}];function u(e){const r={h1:"h1",h2:"h2",header:"header",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"palindrome",children:"Palindrome"})}),"\n",(0,i.jsx)(r.h2,{id:"code",children:"CODE"}),"\n",(0,i.jsx)(s.A,{language:"java",children:o})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);