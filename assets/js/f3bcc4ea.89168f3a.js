"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[5748],{1507:(n,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>e,toc:()=>h});const e=JSON.parse('{"id":"algorithms/insertionSort","title":"Insertion Sort","description":"Insertion Sort in C","source":"@site/docs/three/algorithms/insertionSort.mdx","sourceDirName":"algorithms","slug":"/algorithms/insertionSort","permalink":"/docs/three/algorithms/insertionSort","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"description":"Insertion Sort in C"},"sidebar":"tutorialSidebar","previous":{"title":"Selection Sort","permalink":"/docs/three/algorithms/selectionSort"},"next":{"title":"Binary Search","permalink":"/docs/three/algorithms/binarySearch"}}');var i=t(4848),o=t(8453),s=t(1432);const a='#include <stdio.h>\nint i, j, k, N = 5, ar[5];\nvoid read()\n{\n    printf("Enter the elements: \\n");\n    for (i = 0; i < N; i++)\n    {\n        printf("ar[%d] : ", i);\n        scanf("%d", &ar[i]);\n    }\n}\nvoid display()\n{\n    printf("\\nArray: ");\n    for (i = 0; i < N; i++)\n    {\n        printf("%d ", ar[i]);\n    }\n}\nvoid sort()\n{\n    int temp;\n    for (j = 1; j < N; j++)\n    {\n        temp = ar[j];\n        k = j - 1;\n        while (k >= 0 && ar[k] > temp)\n        {\n            ar[k + 1] = ar[k];\n            k--;\n        }\n        ar[k + 1] = temp;\n    }\n}\nint main()\n{\n    read();\n    display();\n    sort();\n    display();\n    return 0;\n}',d={sidebar_position:4,description:"Insertion Sort in C"},c="Insertion Sort",l={},h=[{value:"CODE",id:"code",level:2}];function p(n){const r={h1:"h1",h2:"h2",header:"header",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"insertion-sort",children:"Insertion Sort"})}),"\n",(0,i.jsx)(r.h2,{id:"code",children:"CODE"}),"\n",(0,i.jsx)(s.A,{language:"c",children:a})]})}function m(n={}){const{wrapper:r}={...(0,o.R)(),...n.components};return r?(0,i.jsx)(r,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}}}]);