"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[8608],{6278:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>h,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Data Structures/HashTable/hash","title":"Hash Tables","description":"Hash Tables in C","source":"@site/docs/two/Data Structures/HashTable/hash.mdx","sourceDirName":"Data Structures/HashTable","slug":"/Data Structures/HashTable/hash","permalink":"/docs/two/Data Structures/HashTable/hash","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"description":"Hash Tables in C"},"sidebar":"tutorialSidebar","previous":{"title":"Hash Tables","permalink":"/docs/two/category/hash-tables"},"next":{"title":"DFS and BFS","permalink":"/docs/two/category/dfs-and-bfs"}}');var i=a(4848),s=a(8453),r=a(1432),c=a(3107);const h={sidebar_position:6,description:"Hash Tables in C"},l="Hash Tables",d={},o=[];function f(n){const e={h1:"h1",header:"header",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"hash-tables",children:"Hash Tables"})}),"\n",(0,i.jsx)(r.A,{language:"c",children:c.A})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(f,{...n})}):f(n)}},3107:(n,e,a)=>{a.d(e,{A:()=>t});const t='#include <stdio.h>\nint main()\n{\n    int N;\n    printf("\\nEnter Value of N:");\n    scanf("%d", &N);\n    int ar[N];\n    for (int i = 0; i < N; i++)\n    {\n        ar[i] = 0;\n    }\n\n    int index, ch;\n\n    do\n    {\n        printf("\\nEnter choice:");\n        printf("\\n1. Insert:");\n        printf("\\n2. Display:");\n        printf("\\n3. Search:");\n        printf("\\n4. Exit:\\n");\n        scanf("%d", &ch);\n        switch (ch)\n        {\n        case 1:\n        {\n            int key, flag = 0;\n            printf("\\nEnter the Key Element:");\n            scanf("%d", &key);\n            int h_key = key % N;\n            for (int i = 0; i < N; i++)\n            {\n                index = (h_key + i) % N;\n                if (ar[index] == 0)\n                {\n                    ar[index] = key;\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0)\n            {\n                printf("\\nHash Table is Full");\n            }\n\n            break;\n        }\n        case 2:\n        {\n            for (int i = 0; i < N; i++)\n            {\n                printf("\\n%d ", ar[i]);\n            }\n            break;\n        }\n        case 3:\n        {\n            int key, flag = 0;\n            printf("\\nEnter the Key Element:");\n            scanf("%d", &key);\n            int h_key = key % N;\n            for (int i = 0; i < N; i++)\n            {\n                index = (h_key + i) % N;\n                if (ar[index] == key)\n                {\n                    printf("\\nElement %d found at index %d", key, index);\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0)\n            {\n                printf("\\nHash Table is Full");\n            }\n            break;\n        }\n        default:\n            break;\n        }\n    } while (ch != 4);\n\n    return 0;\n}\n'}}]);