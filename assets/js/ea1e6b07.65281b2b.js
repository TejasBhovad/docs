"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[3440],{8414:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>g,frontMatter:()=>h,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"algorithms/mergeSort","title":"Merge Sort","description":"Merge Sort in C","source":"@site/docs/three/algorithms/mergeSort.mdx","sourceDirName":"algorithms","slug":"/algorithms/mergeSort","permalink":"/docs/three/algorithms/mergeSort","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"description":"Merge Sort in C"},"sidebar":"tutorialSidebar","previous":{"title":"Binary Search","permalink":"/docs/three/algorithms/binarySearch"},"next":{"title":"Quick Sort","permalink":"/docs/three/algorithms/quickSort"}}');var t=i(4848),o=i(8453),s=i(1432);const a='// wap to implement merge sort\n#include <stdio.h>\nint ar[100], i, j, k, n;\nvoid merge(int low, int mid, int high)\n{\n    int temp[100];\n    i = low;\n    j = mid + 1;\n    k = low;\n    while (i <= mid && j <= high)\n    {\n        if (ar[i] <= ar[j])\n        {\n            temp[k] = ar[i];\n            i++;\n            k++;\n        }\n        else\n        {\n            temp[k] = ar[j];\n            j++;\n            k++;\n        }\n    }\n    while (i <= mid)\n    {\n        temp[k] = ar[i];\n        i++;\n        k++;\n    }\n    while (j <= high)\n    {\n        temp[k] = ar[j];\n        j++;\n        k++;\n    }\n    for (i = low; i <= high; i++)\n    {\n        ar[i] = temp[i];\n    }\n}\n\nvoid mergeSort(int low, int high)\n{\n    int mid;\n    if (low < high)\n    {\n        mid = (low + high) / 2;\n        mergeSort(low, mid);\n        mergeSort(mid + 1, high);\n        merge(low, mid, high);\n    }\n}\n\nint main()\n{\n    printf("Enter N: ");\n    scanf("%d", &n);\n    printf("Enter Array Elements: \\n");\n    for (i = 0; i < n; i++)\n    {\n        scanf("%d", &ar[i]);\n    }\n    mergeSort(0, n - 1);\n    printf("Sorted Array: \\n");\n    for (i = 0; i < n; i++)\n    {\n        printf("%d ", ar[i]);\n    }\n    printf("\\n");\n    return 0;\n}',h={sidebar_position:6,description:"Merge Sort in C"},d="Merge Sort",l={},m=[{value:"CODE",id:"code",level:2}];function c(n){const e={h1:"h1",h2:"h2",header:"header",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"merge-sort",children:"Merge Sort"})}),"\n",(0,t.jsx)(e.h2,{id:"code",children:"CODE"}),"\n",(0,t.jsx)(s.A,{language:"c",children:a})]})}function g(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}}}]);