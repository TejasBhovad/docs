"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[4429],{694:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>h,toc:()=>o});var a=t(5893),i=t(1151),s=t(9286),r=t(4607);const c={sidebar_position:6,description:"Hash Tables in C"},l="Hash Tables",h={id:"Data Structures/HashTable/hash",title:"Hash Tables",description:"Hash Tables in C",source:"@site/docs/two/Data Structures/HashTable/hash.mdx",sourceDirName:"Data Structures/HashTable",slug:"/Data Structures/HashTable/hash",permalink:"/docs/two/Data Structures/HashTable/hash",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,description:"Hash Tables in C"},sidebar:"tutorialSidebar",previous:{title:"Hash Tables",permalink:"/docs/two/category/hash-tables"},next:{title:"DFS and BFS",permalink:"/docs/two/category/dfs-and-bfs"}},d={},o=[];function f(n){const e={h1:"h1",...(0,i.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"hash-tables",children:"Hash Tables"}),"\n",(0,a.jsx)(s.Z,{language:"c",children:r.Z})]})}function u(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(f,{...n})}):f(n)}},4607:(n,e,t)=>{t.d(e,{Z:()=>a});const a='#include <stdio.h>\nint main()\n{\n    int N;\n    printf("\\nEnter Value of N:");\n    scanf("%d", &N);\n    int ar[N];\n    for (int i = 0; i < N; i++)\n    {\n        ar[i] = 0;\n    }\n\n    int index, ch;\n\n    do\n    {\n        printf("\\nEnter choice:");\n        printf("\\n1. Insert:");\n        printf("\\n2. Display:");\n        printf("\\n3. Search:");\n        printf("\\n4. Exit:\\n");\n        scanf("%d", &ch);\n        switch (ch)\n        {\n        case 1:\n        {\n            int key, flag = 0;\n            printf("\\nEnter the Key Element:");\n            scanf("%d", &key);\n            int h_key = key % N;\n            for (int i = 0; i < N; i++)\n            {\n                index = (h_key + i) % N;\n                if (ar[index] == 0)\n                {\n                    ar[index] = key;\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0)\n            {\n                printf("\\nHash Table is Full");\n            }\n\n            break;\n        }\n        case 2:\n        {\n            for (int i = 0; i < N; i++)\n            {\n                printf("\\n%d ", ar[i]);\n            }\n            break;\n        }\n        case 3:\n        {\n            int key, flag = 0;\n            printf("\\nEnter the Key Element:");\n            scanf("%d", &key);\n            int h_key = key % N;\n            for (int i = 0; i < N; i++)\n            {\n                index = (h_key + i) % N;\n                if (ar[index] == key)\n                {\n                    printf("\\nElement %d found at index %d", key, index);\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0)\n            {\n                printf("\\nHash Table is Full");\n            }\n            break;\n        }\n        default:\n            break;\n        }\n    } while (ch != 4);\n\n    return 0;\n}\n'}}]);