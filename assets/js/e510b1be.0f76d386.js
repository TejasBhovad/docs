"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7418],{5791:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>m,toc:()=>d});var r=i(7462),e=(i(7294),i(3905)),o=i(814);const a={sidebar_position:14,description:"Matrix Product in Java"},s="Matrix Product",m={unversionedId:"java/other/ProdMat",id:"java/other/ProdMat",title:"Matrix Product",description:"Matrix Product in Java",source:"@site/docs/java/other/ProdMat.mdx",sourceDirName:"java/other",slug:"/java/other/ProdMat",permalink:"/docs/java/other/ProdMat",draft:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14,description:"Matrix Product in Java"},sidebar:"tutorialSidebar",previous:{title:"Diagonal Sum Matrix",permalink:"/docs/java/other/DiagSum"},next:{title:"Thread methods",permalink:"/docs/java/other/Thread"}},u={},d=[{value:"CODE",id:"code",level:2}],c={toc:d};function l(n){let{components:t,...i}=n;return(0,e.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,e.kt)("h1",{id:"matrix-product"},"Matrix Product"),(0,e.kt)("h2",{id:"code"},"CODE"),(0,e.kt)(o.Z,{language:"java",mdxType:"CodeBlock"},'// WAP to find product of user defined 2 arrays of size m,n\n\nimport java.util.Scanner;\n\npublic class ProdMat {\n    public static void main(String[] args) {\n        int m1, m2, n1, n2;\n        Scanner sc = new Scanner(System.in);\n        System.out.println("Enter the number of rows: ");\n        m1 = sc.nextInt();\n        System.out.println("Enter the number of columns: ");\n        n1 = sc.nextInt();\n        int mat1[][] = new int[m1][n1];\n        for (int i = 0; i < m1; i++) {\n            System.out.println("Enter the elements of row " + (i + 1) + ": ");\n            for (int j = 0; j < n1; j++)\n                mat1[i][j] = sc.nextInt();\n        }\n        System.out.println("Original matrix 1: ");\n        for (int i = 0; i < m1; i++) {\n            for (int j = 0; j < n1; j++)\n                System.out.print(mat1[i][j] + " ");\n            System.out.println();\n        }\n        System.out.println("Enter the number of rows: ");\n        m2 = sc.nextInt();\n        System.out.println("Enter the number of columns: ");\n        n2 = sc.nextInt();\n        int mat2[][] = new int[m2][n2];\n        for (int i = 0; i < m2; i++) {\n            System.out.println("Enter the elements of row " + (i + 1) + ": ");\n            for (int j = 0; j < n2; j++)\n                mat2[i][j] = sc.nextInt();\n        }\n        System.out.println("Original matrix 2: ");\n        for (int i = 0; i < m2; i++) {\n            for (int j = 0; j < n2; j++)\n                System.out.print(mat2[i][j] + " ");\n            System.out.println();\n        }\n        System.out.println("Product of matrices: ");\n        int mat3[][] = new int[m1][n2];\n        for (int i = 0; i < m1; i++)\n            for (int j = 0; j < n2; j++)\n                for (int k = 0; k < n1; k++)\n                    mat3[i][j] += mat1[i][k] * mat2[k][j];\n\n        for (int i = 0; i < m1; i++) {\n            for (int j = 0; j < n2; j++)\n                System.out.print(mat3[i][j] + " ");\n            System.out.println();\n        }\n\n    }\n}\n'))}l.isMDXComponent=!0}}]);