"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9378],{9525:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var r=i(7462),o=(i(7294),i(3905)),e=i(814);const s={sidebar_position:4,description:"Insertion Sort in C"},a="Insertion Sort",d={unversionedId:"algorithms/insertionSort",id:"algorithms/insertionSort",title:"Insertion Sort",description:"Insertion Sort in C",source:"@site/docs/algorithms/insertionSort.mdx",sourceDirName:"algorithms",slug:"/algorithms/insertionSort",permalink:"/docs/algorithms/insertionSort",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Insertion Sort in C"},sidebar:"tutorialSidebar",previous:{title:"Selection Sort",permalink:"/docs/algorithms/selectionSort"},next:{title:"C Programs",permalink:"/docs/c/"}},l={},c=[{value:"CODE",id:"code",level:2}],p={toc:c};function m(n){let{components:t,...i}=n;return(0,o.kt)("wrapper",(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"insertion-sort"},"Insertion Sort"),(0,o.kt)("h2",{id:"code"},"CODE"),(0,o.kt)(e.Z,{language:"c",mdxType:"CodeBlock"},'#include <stdio.h>\nint i, j, k, N = 5, ar[5];\nvoid read()\n{\n    printf("Enter the elements: \\n");\n    for (i = 0; i < N; i++)\n    {\n        printf("ar[%d] : ", i);\n        scanf("%d", &ar[i]);\n    }\n}\nvoid display()\n{\n    printf("\\nArray: ");\n    for (i = 0; i < N; i++)\n    {\n        printf("%d ", ar[i]);\n    }\n}\nvoid sort()\n{\n    int temp;\n    for (j = 1; j < N; j++)\n    {\n        temp = ar[j];\n        k = j - 1;\n        while (k >= 0 && ar[k] > temp)\n        {\n            ar[k + 1] = ar[k];\n            k--;\n        }\n        ar[k + 1] = temp;\n    }\n}\nint main()\n{\n    read();\n    display();\n    sort();\n    display();\n    return 0;\n}'))}m.isMDXComponent=!0}}]);