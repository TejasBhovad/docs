"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[9389],{9033:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>m,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var s=t(5893),a=t(1151),r=t(9286);const o="-- Creating tables for the Tejas database\nCREATE TABLE tejas_customer (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_street VARCHAR(100)\n);\n\nCREATE TABLE tejas_loan (\n    loan_number INT PRIMARY KEY,\n    branch_name VARCHAR(50),\n    amount DECIMAL(10, 2)\n);\n-- Insert sample data into the tables\nINSERT INTO tejas_customer (customer_id, customer_name, customer_street)\nVALUES (1, 'John Doe', '123 Main Street');\n\nINSERT INTO tejas_customer (customer_id, customer_name, customer_street)\nVALUES (2, 'Jane Smith', '456 Elm Street');\n\nINSERT INTO tejas_loan (loan_number, branch_name, amount)\nVALUES (101, 'Perryridge', 1500.00);\n\nINSERT INTO tejas_loan (loan_number, branch_name, amount)\nVALUES (102, 'Perryridge', 1000.00);\n\nINSERT INTO tejas_loan (loan_number, branch_name, amount)\nVALUES (103, 'Maplewood', 2000.00);\n\n-- Simple queries\n-- Find the names of all branches in the loan relation\nSELECT branch_name FROM tejas_loan;\n\n-- Find the names of all branches in the loan relation and remove duplicates\nSELECT DISTINCT branch_name FROM tejas_loan;\n\n-- Find the loan numbers for loans made at the Perryridge branch with amounts greater than $1200\nSELECT loan_number FROM tejas_loan\nWHERE branch_name = 'Perryridge' AND amount > 1200;\n\n-- String manipulation operations\n-- Find the names of all customers whose street includes the substring \"Main\"\nSELECT customer_name FROM tejas_customer\nWHERE customer_street LIKE '%Main%';\n\n-- Find all customers with a CustomerName starting with \"J\"\nSELECT * FROM tejas_customer\nWHERE customer_name LIKE 'J%';\n\n-- Find all customers with a CustomerName that ends with \"e\"\nSELECT * FROM tejas_customer\nWHERE customer_name LIKE '%e';\n\n-- Find all customers with a CustomerName that has \"Smith\" in any position\nSELECT * FROM tejas_customer\nWHERE customer_name LIKE '%Smith%';\n\n-- Find all customers with a CustomerName that starts with \"J\" and is at least 8 characters in length\nSELECT * FROM tejas_customer\nWHERE customer_name LIKE 'J________';\n\n-- Find all customers with a CustomerName that does NOT start with \"J\"\nSELECT * FROM tejas_customer\nWHERE customer_name NOT LIKE 'J%';",i={sidebar_position:3,description:"Queries in SQL"},m="Queries",c={id:"sql/queries",title:"Queries",description:"Queries in SQL",source:"@site/docs/three/sql/queries.mdx",sourceDirName:"sql",slug:"/sql/queries",permalink:"/docs/three/sql/queries",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Queries in SQL"},sidebar:"tutorialSidebar",previous:{title:"Constraints",permalink:"/docs/three/sql/constraints"},next:{title:"Nested queries",permalink:"/docs/three/sql/nested"}},l={},u=[{value:"Code",id:"code",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"queries",children:"Queries"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"If you get ORA-00955: name is already used by an existing object error, you can use the following command to delete the table."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"DROP TABLE table_name;\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"code",children:"Code"}),"\n",(0,s.jsx)(r.Z,{language:"sql",children:o})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);