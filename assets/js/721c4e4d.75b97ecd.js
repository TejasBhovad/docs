"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2338],{2415:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>u,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=e(7462),o=(e(7294),e(3905)),r=e(814);const s={sidebar_position:14,description:"8 Queens in C"},a="8 Queens in C",l={unversionedId:"algorithms/8queens",id:"algorithms/8queens",title:"8 Queens in C",description:"8 Queens in C",source:"@site/docs/algorithms/8queens.mdx",sourceDirName:"algorithms",slug:"/algorithms/8queens",permalink:"/docs/algorithms/8queens",draft:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14,description:"8 Queens in C"},sidebar:"tutorialSidebar",previous:{title:"Floyd Warshall Algorithm",permalink:"/docs/algorithms/warshall"},next:{title:"String Matching",permalink:"/docs/algorithms/stringMatch"}},u={},d=[{value:"CODE",id:"code",level:2}],c={toc:d};function m(n){let{components:i,...e}=n;return(0,o.kt)("wrapper",(0,t.Z)({},c,e,{components:i,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"8-queens-in-c"},"8 Queens in C"),(0,o.kt)("h2",{id:"code"},"CODE"),(0,o.kt)(r.Z,{language:"c",mdxType:"CodeBlock"},'#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint board[8];\n\nint place(int row, int column)\n{\n    for (int i = 0; i < row; i++)\n    {\n        if (board[i] == column || abs(board[i] - column) == abs(i - row))\n        {\n            return 0;\n        }\n    }\n    return 1; // No conflict\n}\n\nvoid print_board(int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            if (board[i] == j)\n            {\n                printf("Q ");\n            }\n            else\n            {\n                printf(". ");\n            }\n        }\n        printf("\\n");\n    }\n    printf("\\n");\n}\n\nvoid Queen(int row, int n)\n{\n    if (row == n)\n    {\n        print_board(n);\n    }\n    else\n    {\n        for (int column = 0; column < n; column++)\n        {\n            if (place(row, column))\n            {\n                board[row] = column;\n                Queen(row + 1, n);\n            }\n        }\n    }\n}\n\nint main()\n{\n    int n = 8;\n    Queen(0, n);\n    return 0;\n}\n'))}m.isMDXComponent=!0}}]);