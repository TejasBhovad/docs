"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5830],{1443:(t,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>g});var e=i(7462),r=(i(7294),i(3905)),a=i(814);const s={sidebar_position:15,description:"String matching in C"},o="String Matching",c={unversionedId:"algorithms/stringMatch",id:"algorithms/stringMatch",title:"String Matching",description:"String matching in C",source:"@site/docs/algorithms/stringMatch.mdx",sourceDirName:"algorithms",slug:"/algorithms/stringMatch",permalink:"/docs/algorithms/stringMatch",draft:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15,description:"String matching in C"},sidebar:"tutorialSidebar",previous:{title:"8 Queens in C",permalink:"/docs/algorithms/8queens"},next:{title:"R Scripts",permalink:"/docs/category/r-scripts"}},d={},g=[{value:"CODE",id:"code",level:2}],h={toc:g};function l(t){let{components:n,...i}=t;return(0,r.kt)("wrapper",(0,e.Z)({},h,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"string-matching"},"String Matching"),(0,r.kt)("h2",{id:"code"},"CODE"),(0,r.kt)(a.Z,{language:"c",mdxType:"CodeBlock"},'// Write a program to implement Na\xefve String Matching Algorithm.\n#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n    char text[100], pattern[100];\n    printf("Enter the text: ");\n    scanf("%s", text);\n    printf("Enter the pattern: ");\n    scanf("%s", pattern);\n    int n = strlen(text);\n    int m = strlen(pattern);\n    for (int i = 0; i <= n - m; i++)\n    {\n        int j;\n        for (j = 0; j < m; j++)\n        {\n            if (text[i + j] != pattern[j])\n            {\n                break;\n            }\n        }\n        if (j == m)\n        {\n            printf("Pattern found at index %d\\n", i);\n        }\n    }\n    return 0;\n}'))}l.isMDXComponent=!0}}]);