"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2688],{1573:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var t=a(7462),r=(a(7294),a(3905)),i=a(814);const s={sidebar_position:11,description:"Multiple threads in Java"},d="Multi Threading",l={unversionedId:"java/Multithread",id:"java/Multithread",title:"Multi Threading",description:"Multiple threads in Java",source:"@site/docs/java/Multithread.mdx",sourceDirName:"java",slug:"/java/Multithread",permalink:"/docs/java/Multithread",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,description:"Multiple threads in Java"},sidebar:"tutorialSidebar",previous:{title:"Exceptions",permalink:"/docs/java/Exception"},next:{title:"Calculator",permalink:"/docs/java/Calculator"}},u={},o=[{value:"CODE",id:"code",level:2}],c={toc:o};function p(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"multi-threading"},"Multi Threading"),(0,r.kt)("h2",{id:"code"},"CODE"),(0,r.kt)(i.Z,{language:"java",mdxType:"CodeBlock"},'import java.util.*;\n\npublic class Multithread {\n    public static void main(String[] args) {\n        Reader r = new Reader();\n        Thread readerThread = new Thread(r);\n        readerThread.start();\n    }\n}\n\nclass Reader implements Runnable {\n    public void run() {\n        Scanner sc = new Scanner(System.in);\n        System.out.println("Enter a number: ");\n        int n = sc.nextInt();\n        Thread Square = new Thread(new Square(n));\n        Square.start();\n    }\n}\n\nclass Square implements Runnable {\n    int x;\n\n    Square(int n) {\n        x = n;\n    }\n\n    public void run() {\n        int sqr = x * x;\n        System.out.println("Square: " + sqr);\n    }\n}\n'))}p.isMDXComponent=!0}}]);