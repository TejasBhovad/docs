"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[7172],{5541:(n,i,t)=>{t.r(i),t.d(i,{assets:()=>h,contentTitle:()=>d,default:()=>f,frontMatter:()=>o,metadata:()=>e,toc:()=>c});const e=JSON.parse('{"id":"algorithms/warshall","title":"Floyd Warshall Algorithm","description":"Warshall Algo in C","source":"@site/docs/three/algorithms/warshall.mdx","sourceDirName":"algorithms","slug":"/algorithms/warshall","permalink":"/docs/three/algorithms/warshall","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13,"description":"Warshall Algo in C"},"sidebar":"tutorialSidebar","previous":{"title":"Longest Common Subsequence","permalink":"/docs/three/algorithms/lcs"},"next":{"title":"8 Queens in C","permalink":"/docs/three/algorithms/8queens"}}');var r=t(4848),s=t(8453),a=t(1432);const l='#include <stdio.h>\n#define INF 99999\n#define V 4\n\nvoid path(int graph[V][V])\n{\n    int dist[V][V];\n\n    for (int i = 0; i < V; i++)\n    {\n        for (int j = 0; j < V; j++)\n        {\n            dist[i][j] = graph[i][j];\n        }\n    }\n\n    for (int k = 0; k < V; k++)\n    {\n        for (int i = 0; i < V; i++)\n        {\n            for (int j = 0; j < V; j++)\n            {\n                if (dist[i][k] != INF && dist[k][j] != INF &&\n                    dist[i][j] > dist[i][k] + dist[k][j])\n                {\n                    dist[i][j] = dist[i][k] + dist[k][j];\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i < V; i++)\n    {\n        for (int j = 0; j < V; j++)\n        {\n            if (dist[i][j] == INF)\n            {\n                printf("INF ");\n            }\n            else\n            {\n                printf("%d ", dist[i][j]);\n            }\n        }\n        printf("\\n");\n    }\n}\n\nint main()\n{\n    int graph[V][V] = {\n        {0, 3, INF, 5},\n        {2, 0, INF, 4},\n        {INF, 1, 0, INF},\n        {INF, INF, 2, 0}};\n\n    path(graph);\n\n    return 0;\n}',o={sidebar_position:13,description:"Warshall Algo in C"},d="Floyd Warshall Algorithm",h={},c=[{value:"CODE",id:"code",level:2}];function p(n){const i={h1:"h1",h2:"h2",header:"header",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"floyd-warshall-algorithm",children:"Floyd Warshall Algorithm"})}),"\n",(0,r.jsx)(i.h2,{id:"code",children:"CODE"}),"\n",(0,r.jsx)(a.A,{language:"c",children:l})]})}function f(n={}){const{wrapper:i}={...(0,s.R)(),...n.components};return i?(0,r.jsx)(i,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}}}]);