"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[9584],{9148:(n,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var i=r(5893),o=r(1151),e=r(9163);const s={title:"String Operations",sidebar_position:2,description:"String Operations in Python"},l="Python",p={id:"python/journal/2",title:"String Operations",description:"String Operations in Python",source:"@site/docs/four/python/journal/2.mdx",sourceDirName:"python/journal",slug:"/python/journal/2",permalink:"/docs/four/python/journal/2",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"String Operations",sidebar_position:2,description:"String Operations in Python"},sidebar:"tutorialSidebar",previous:{title:"arithmetic operations",permalink:"/docs/four/python/journal/1"},next:{title:"List,Tuples and Dictionaries concepts",permalink:"/docs/four/python/journal/3"}},a={},d=[];function c(n){const t={blockquote:"blockquote",code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"python",children:(0,i.jsx)(e.Z,{name:"banner",description:"String Operations",children:"Python"})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Write python programs to understand Strings: Basic String Operations, String Methods and List."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# basic string operations\n\n# 1. Concatenation\nstr = "Hello" + " " + "World"\nprint(str)\n\n# 2. Repetition\nstr = "Hello" * 3\nprint(str)\n\n# 3. Membership\nstr = "Hello World"\nprint("Hello" in str)\nprint("Hello" not in str)\n\n# 4. Slicing\nstr = "Hello World"\nprint(str[0:5])\nprint(str[6:])\nprint(str[:5])\nprint(str[-5:-1])\nprint(str[0:5:2])\n\n# 5. Length\nstr = "Hello World"\nprint(len(str))\n\n# 6. Iteration\nstr = "Hello World"\nfor i in str:\n    print(i)\n\n# 7. Comparison\nstr1 = "Hello"\nstr2 = "Hello"\nprint(str1 == str2)\nprint(str1 != str2)\nprint(str1 > str2)\nprint(str1 < str2)\n\n# 8. String Formatting\nstr = "Hello World"\nprint("String is: %s" % str)\nprint("String is: %10s" % str)\nprint("String is: %-10s" % str)\n\n# 9. Escape Sequence\nprint("Hello \\"World\\"")\nprint("Hello \\\'World\\\'")\nprint("Hello \\\\World\\\\")\n\n# 10. Raw String\nprint(r"Hello \\n World")\n\n# 11. Triple Quotes\nprint("""Hello\nWorld""")\n\n# 12. String as Sequence\nstr = "Hello World"\nprint(str[0])\nprint(str[1])\n\n# 13. String as Array\nstr = "Hello World"\nprint(str[0])\n\n# 14. String as Object\nstr = "Hello World"\nprint(str.upper())\n\n# 15. String as Iterator\nstr = "Hello World"\nit = iter(str)\nprint(next(it))\n\n# 16. String as Argument\nstr = "Hello World"\nprint(str)\n\n# 17. String as Return Value\ndef str():\n    return "Hello World"\n\nprint(str())\n\n# 18. String as Variable\nstr = "Hello World"\nprint(str)\n\n# 19. String as Expression\nstr = "Hello World"\nprint(str)\n\n# 20. String as Index\nstr = "Hello World"\nprint(str[0])\n\n'})})]})}function g(n={}){const{wrapper:t}={...(0,o.a)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},9163:(n,t,r)=>{r.d(t,{Z:()=>e});r(7294);var i=r(4996),o=r(5893);const e=n=>{let{name:t,description:r,children:e}=n;const s=(0,i.Z)(`/images/${t}.png`);return(0,o.jsxs)("div",{style:{display:"inline-block",height:"150px",width:"100%",position:"relative",overflow:"hidden",borderRadius:"5px"},children:[(0,o.jsx)("img",{src:s,alt:s,style:{width:"100%",height:"100%",objectFit:"cover",position:"absolute",zIndex:-1}}),(0,o.jsx)("h2",{style:{color:"white",padding:"12px",boxSizing:"border-box",paddingBottom:"0px",fontWeight:"500"},children:e}),(0,o.jsx)("p",{style:{color:"white",paddingTop:"0px",paddingBottom:"12px",paddingLeft:"12px",paddingRight:"12px",boxSizing:"border-box"},children:r})]})}}}]);