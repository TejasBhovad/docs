"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[464],{1476:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>h,toc:()=>c});var i=a(7462),t=(a(7294),a(3905)),s=a(814),r=a(1160);const l={sidebar_position:6,description:"Hash Tables in C"},o="Hash Tables",h={unversionedId:"HashTable/hash",id:"HashTable/hash",title:"Hash Tables",description:"Hash Tables in C",source:"@site/docs/HashTable/hash.mdx",sourceDirName:"HashTable",slug:"/HashTable/hash",permalink:"/docs/HashTable/hash",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,description:"Hash Tables in C"},sidebar:"tutorialSidebar",previous:{title:"Hash Tables",permalink:"/docs/category/hash-tables"},next:{title:"Journal",permalink:"/docs/category/journal"}},d={},c=[],f={toc:c};function p(n){let{components:e,...a}=n;return(0,t.kt)("wrapper",(0,i.Z)({},f,a,{components:e,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"hash-tables"},"Hash Tables"),(0,t.kt)(s.Z,{language:"c",mdxType:"CodeBlock"},r.Z))}p.isMDXComponent=!0},1160:(n,e,a)=>{a.d(e,{Z:()=>i});const i='#include <stdio.h>\nint main()\n{\n    int N;\n    printf("\\nEnter Value of N:");\n    scanf("%d", &N);\n    int ar[N];\n    for (int i = 0; i < N; i++)\n    {\n        ar[i] = 0;\n    }\n\n    int index, ch;\n\n    do\n    {\n        printf("\\nEnter choice:");\n        printf("\\n1. Insert:");\n        printf("\\n2. Display:");\n        printf("\\n3. Search:");\n        printf("\\n4. Exit:\\n");\n        scanf("%d", &ch);\n        switch (ch)\n        {\n        case 1:\n        {\n            int key, flag = 0;\n            printf("\\nEnter the Key Element:");\n            scanf("%d", &key);\n            int h_key = key % N;\n            for (int i = 0; i < N; i++)\n            {\n                index = (h_key + i) % N;\n                if (ar[index] == 0)\n                {\n                    ar[index] = key;\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0)\n            {\n                printf("\\nHash Table is Full");\n            }\n\n            break;\n        }\n        case 2:\n        {\n            for (int i = 0; i < N; i++)\n            {\n                printf("\\n%d ", ar[i]);\n            }\n            break;\n        }\n        case 3:\n        {\n            int key, flag = 0;\n            printf("\\nEnter the Key Element:");\n            scanf("%d", &key);\n            int h_key = key % N;\n            for (int i = 0; i < N; i++)\n            {\n                index = (h_key + i) % N;\n                if (ar[index] == key)\n                {\n                    printf("\\nElement %d found at index %d", key, index);\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0)\n            {\n                printf("\\nHash Table is Full");\n            }\n            break;\n        }\n        default:\n            break;\n        }\n    } while (ch != 4);\n\n    return 0;\n}\n'}}]);