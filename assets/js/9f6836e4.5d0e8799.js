"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[3380],{4125:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"deep-learning/one","title":"Experiment 1","description":"Explore ML libraries","source":"@site/docs/six/deep-learning/one.mdx","sourceDirName":"deep-learning","slug":"/deep-learning/one","permalink":"/docs/six/deep-learning/one","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Experiment 1","sidebar_position":1,"description":"Explore ML libraries"},"sidebar":"tutorialSidebar","previous":{"title":"Deep learning","permalink":"/docs/six/category/deep-learning"},"next":{"title":"Computer vision","permalink":"/docs/six/category/computer-vision"}}');var i=t(4848),r=t(8453),s=t(8731);const o={title:"Experiment 1",sidebar_position:1,description:"Explore ML libraries"},l="Experiment 1",p={},d=[];function c(n){const e={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"experiment-1",children:(0,i.jsx)(s.A,{name:"banner",description:"Explore ML libraries",children:"Experiment 1"})})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"Explore popular machine learning libraries in Python, including Pandas, NumPy, Matplotlib, Scikit-Learn, TensorFlow, and PyTorch."}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'"""\n## Pandas\n"""\n\nimport pandas as pd\n\n# Creating a dataframe\ndata = {\'Name\': [\'Alice\', \'Bob\', \'Charlie\'],\n        \'Age\': [25, 30, 35]}\ndf = pd.DataFrame(data)\n\nprint(df.head())\n\n# select column\nages = df[\'Age\']\n\n# select mult cols\nsubset = df[[\'Name\', \'Age\']]\n\nprint(ages)\nprint(subset)\n\ndata_with_nan = {\n    \'Name\': [\'Alice\', \'Bob\', None, \'David\'],\n    \'Age\': [25, None, 35, 40]\n}\ndf_nan = pd.DataFrame(data_with_nan)\n\nprint("\\nDataFrame with missing values:")\nprint(df_nan)\n\n# Filling missing values\ndf_nan.fillna({\'Name\': \'Unknown\', \'Age\': df_nan[\'Age\'].mean()}, inplace=True)\nprint("\\nDataFrame after filling missing values:")\nprint(df_nan)\n\n"""## NumPy"""\n\nimport numpy as np\n\narray_1d = np.array([1, 2, 3, 4, 5])\nprint("1D Array:")\nprint(array_1d)\n\narray_2d = np.array([[1, 2, 3], [4, 5, 6]])\nprint("\\n2D Array:")\nprint(array_2d)\n\nprint("\\nShape of 2D Array:", array_2d.shape)\nprint("Size of Array:", array_2d.size)\nprint("Data Type of Array:", array_2d.dtype)\n\n# Two arrays for arithmetic operations\narr1 = np.array([10, 20, 30])\narr2 = np.array([5, 10, 15])\n\n# Addition\nadd_result = np.add(arr1, arr2)\nprint("\\nAddition Result:", add_result)\n\n# Subtraction\nsub_result = np.subtract(arr1, arr2)\nprint("Subtraction Result:", sub_result)\n\n# Multiplication\nmul_result = np.multiply(arr1, arr2)\nprint("Multiplication Result:", mul_result)\n\n# Division\ndiv_result = np.divide(arr1, arr2)\nprint("Division Result:", div_result)\n\n# Reshaping a 1D array into a 2D array\nreshaped_array = np.arange(12).reshape(3, 4)\nprint("\\nReshaped Array (3x4):")\nprint(reshaped_array)\n\n"""## Matplotlib"""\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([23,333, 335, 457, 311])\n\n# Creating the line plot\nplt.plot(x, y)\nplt.title("Basic Line Plot")\nplt.xlabel("X-axis")\nplt.ylabel("Y-axis")\nplt.grid(True)\nplt.show()\n\n# Data for bar chart\ncategories = [\'A\', \'B\', \'C\', \'D\']\nvalues = [4, 7, 11, 8]\n\n# Creating the bar chart\nplt.bar(categories, values)\nplt.title("Bar Chart")\nplt.xlabel("Categories")\nplt.ylabel("Values")\nplt.show()\n\n# Data for histogram\ndata = np.random.randn(1000)\n\n# Creating the histogram\nplt.hist(data, bins=30, alpha=0.7)\nplt.title("Histogram")\nplt.xlabel("Value")\nplt.ylabel("Frequency")\nplt.grid(axis=\'y\')\nplt.show()\n\n# Data for scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\n\n# Creating the scatter plot\nplt.scatter(x, y)\nplt.title("Scatter Plot")\nplt.xlabel("X-axis")\nplt.ylabel("Y-axis")\nplt.grid(True)\nplt.show()\n\n# Data for pie chart\nsizes = [15, 30, 45, 10]\nlabels = [\'A\', \'B\', \'C\', \'D\']\n\n# Creating the pie chart\nplt.pie(sizes, labels=labels, autopct=\'%1.1f%%\')\nplt.title("Pie Chart")\nplt.axis(\'equal\')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()\n\n"""## Tensorflow"""\n\nimport tensorflow as tf\n\n# Use compat.v1 to access Session\nwith tf.compat.v1.Session() as sess:\n    # Your operations here\n    result = sess.run(tf.add(5, 3))\n    print("Result:", result)\n\n# Creating a tensor filled with zeros\nzeros_tensor = tf.zeros((2, 3))\nprint("\\nZeros Tensor:")\nprint(zeros_tensor)\n\n# Creating a tensor filled with random values\nrandom_tensor = tf.random.uniform((2, 3), minval=0, maxval=10)\nprint("\\nRandom Tensor:")\nprint(random_tensor)\n\nconstant_tensor = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nprint("Constant Tensor:")\nprint(constant_tensor)\n\ntensor_a = tf.constant([[1, 2], [3, 4]])\ntensor_b = tf.constant([[5, 6], [7, 8]])\n\n# Addition\nadd_result = tf.add(tensor_a, tensor_b)\nprint("\\nAddition Result:")\nprint(add_result)\n\n"""## Scikit learn"""\n\nfrom sklearn import datasets\n\n# Load the Iris dataset\niris = datasets.load_iris()\n\n# Display the features and target\nprint("Features:", iris.data)\nprint("Target:", iris.target)\n\nfrom sklearn.model_selection import train_test_split\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)\n\nprint("Training set shape:", X_train.shape)\nprint("Testing set shape:", X_test.shape)\n\nfrom sklearn.svm import SVC\n\n# Create an SVM classifier\nclf = SVC(kernel=\'linear\')\n\n# Train the classifier on the training data\nclf.fit(X_train, y_train)\n\n# Make predictions on the test set\npredictions = clf.predict(X_test)\n\nprint("Predictions:", predictions)\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, predictions)\nprint("Accuracy:", accuracy)\n\n# Generate confusion matrix\nconf_matrix = confusion_matrix(y_test, predictions)\nprint("Confusion Matrix:\\n", conf_matrix)\n\nfrom sklearn.model_selection import GridSearchCV\n\n# Define the parameter grid\nparam_grid = {\'C\': [0.1, 1, 10], \'kernel\': [\'linear\', \'rbf\']}\n\n# Create a GridSearchCV object\ngrid_search = GridSearchCV(SVC(), param_grid, cv=5)\n\n# Fit the grid search to the training data\ngrid_search.fit(X_train, y_train)\n\n# Best parameters found\nprint("Best Parameters:", grid_search.best_params_)\n\n"""### **1. Pandas**\n\n#### **Advantages:**\n- **Efficient Data Manipulation**: Allows for quick data manipulation with less code compared to traditional programming languages.\n- **Flexible Data Structures**: Provides DataFrames and Series that can handle various data types and structures.\n- **Data Cleaning and Preparation**: Streamlines processes for cleaning and preparing data for analysis.\n- **Integration with Other Libraries**: Works well with NumPy, Matplotlib, and SciPy for enhanced functionality.\n\n#### **Disadvantages:**\n- **Memory Consumption**: Can be inefficient with very large datasets (over 2-3 GB).\n- **Complex Syntax**: Some users may find the syntax complex compared to standard Python.\n- **Performance Limitations**: Slower than lower-level languages like C or C++ for certain operations.\n\n#### **Applications:**\n- Data cleaning and preparation\n- Exploratory Data Analysis (EDA)\n- Feature engineering for machine learning\n- Time series analysis\n- Data visualization (in conjunction with Matplotlib)\n\n---\n\n### **2. NumPy**\n\n#### **Advantages:**\n- **Performance**: Highly efficient for numerical computations due to its array-oriented approach.\n- **Multidimensional Arrays**: Supports n-dimensional arrays which are essential for scientific computing.\n- **Broad Functionality**: Offers a wide range of mathematical functions to operate on arrays.\n\n#### **Disadvantages:**\n- **Limited Data Types**: Primarily designed for numerical data; less effective for handling non-numeric data.\n- **Learning Curve**: May require some time to understand its array manipulation capabilities fully.\n\n#### **Applications:**\n- Numerical simulations\n- Linear algebra operations\n- Fourier transforms\n- Random number generation\n- Data preprocessing for machine learning\n\n---\n\n### **3. Matplotlib**\n\n#### **Advantages:**\n- **Comprehensive Visualization Options**: Supports a wide variety of static, animated, and interactive plots.\n- **Customization**: Highly customizable plots with extensive options for styling.\n- **Integration**: Works seamlessly with NumPy and Pandas.\n\n#### **Disadvantages:**\n- **Complexity in Advanced Visualizations**: Creating complex visualizations can require verbose code.\n- **Performance Issues**: May not perform well with very large datasets or real-time plotting.\n\n#### **Applications:**\n- Data visualization in EDA\n- Creating publication-quality plots\n- Interactive visualizations in Jupyter notebooks\n- Plotting results from machine learning models\n\n---\n\n### **4. Scikit-Learn**\n\n#### **Advantages:**\n- **User-Friendly API**: Simplifies the process of implementing machine learning algorithms.\n- **Wide Range of Algorithms**: Provides numerous algorithms for classification, regression, clustering, and more.\n- **Built-in Cross-validation Tools**: Facilitates model evaluation through cross-validation techniques.\n\n#### **Disadvantages:**\n- **Limited to Classical ML Algorithms**: Does not support deep learning models natively.\n- **Performance on Large Datasets**: May struggle with very large datasets compared to specialized libraries like TensorFlow.\n\n#### **Applications:**\n- Classification tasks (e.g., spam detection)\n- Regression analysis (e.g., predicting house prices)\n- Clustering (e.g., customer segmentation)\n- Model evaluation and selection\n\n---\n\n### **5. TensorFlow**\n\n#### **Advantages:**\n- **Scalability**: Designed to scale across multiple CPUs and GPUs, making it suitable for large-scale machine learning tasks.\n- **Flexibility**: Offers both high-level APIs (like Keras) for quick model building and low-level APIs for custom model design.\n- **Ecosystem Support**: Integrates well with other tools in the TensorFlow ecosystem for deployment and serving models.\n\n#### **Disadvantages:**\n- **Steep Learning Curve**: Can be complex for beginners due to its extensive features and options.\n- **Verbose Syntax**: Requires more lines of code compared to simpler libraries like Keras or Scikit-Learn.\n\n#### **Applications:**\n- Deep learning applications (e.g., image recognition, natural language processing)\n- Reinforcement learning\n- Time series forecasting\n- Generative models (e.g., GANs)\n\n"""\n\nimport seaborn as sns\n\nsns.set_theme()\n\n# Load an example dataset\ntips = sns.load_dataset("tips")\n\n# Create a visualization\nsns.relplot(\n    data=tips,\n    x="total_bill", y="tip", col="time",\n    hue="smoker", style="smoker", size="size",\n)\n\nfmri = sns.load_dataset("fmri")\nsns.relplot(\n    data=fmri, kind="line",\n    x="timepoint", y="signal", col="region",\n    hue="event", style="event",\n)\n\nsns.displot(data=tips, x="total_bill", col="time", kde=True)\n\npenguins = sns.load_dataset("penguins")\nsns.jointplot(data=penguins, x="flipper_length_mm", y="bill_length_mm", hue="species")\n\nsns.pairplot(data=penguins, hue="species")\n\nsns.relplot(\n    data=penguins,\n    x="bill_length_mm", y="bill_depth_mm", hue="body_mass_g"\n)\n\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style="dark")\n\n# Simulate data from a bivariate Gaussian\nn = 10000\nmean = [0, 0]\ncov = [(2, .4), (.4, .2)]\nrng = np.random.RandomState(0)\nx, y = rng.multivariate_normal(mean, cov, n).T\n\n# Draw a combo histogram and scatterplot with density contours\nf, ax = plt.subplots(figsize=(6, 6))\nsns.scatterplot(x=x, y=y, s=5, color=".15")\nsns.histplot(x=x, y=y, bins=50, pthresh=.1, cmap="mako")\nsns.kdeplot(x=x, y=y, levels=5, color="w", linewidths=1)\n\n"""## Pytorch"""\n\nimport torch\nimport numpy as np\n\n# Create a tensor from a NumPy array\nndarray = np.array([0, 1, 2])\ntensor = torch.from_numpy(ndarray)\n\nprint(tensor)  # Outputs: tensor([0, 1, 2])\nprint(tensor.shape)  # Outputs: torch.Size([3])\nprint(tensor.dtype)   # Outputs: torch.int64\nprint(tensor.device)  # Outputs: cpu\n\n# Create a 3x2 tensor\ntensor_a = torch.tensor([[1, 2], [3, 4], [5, 6]])\n\n# Indexing\nelement = tensor_a[1, 0]\nprint(f"Indexed Element (Row 1, Column 0): {element}")  # Outputs: 3\n\n# Slicing\nslice_tensor = tensor_a[:2, :]\nprint(f"Sliced Tensor (First two rows): \\n{slice_tensor}")\n\n# Reshaping\nreshaped_tensor = tensor_a.view(2, 3)\nprint(f"Reshaped Tensor (2x3): \\n{reshaped_tensor}")\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\n\n# Set up the figure and axis\nfig, ax = plt.subplots()\nx = np.linspace(0, 2 * np.pi, 100)  # x values from 0 to 2\u03c0\nline, = ax.plot(x, np.sin(x), color=\'blue\')  # Initial sine wave\n\n# Set the limits of the axes\nax.set_ylim(-1.5, 1.5)\nax.set_xlim(0, 2 * np.pi)\nax.set_title(\'Animated Sine Wave\')\nax.set_xlabel(\'x\')\nax.set_ylabel(\'sin(x)\')\n\n# Animation function that updates the y data of the line\ndef animate(i):\n    line.set_ydata(np.sin(x + i / 10))  # Update the y data for the sine wave\n    return line,\n\n# Create an animation\nani = FuncAnimation(fig, animate, frames=100, interval=50)\n\n# Display the animation\nplt.show()\n\n'})})]})}function m(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8731:(n,e,t)=>{t.d(e,{A:()=>r});t(6540);var a=t(6025),i=t(4848);const r=n=>{let{name:e,description:t,children:r}=n;const s=(0,a.Ay)(`/images/${e}.jpg`);return(0,i.jsxs)("div",{style:{display:"inline-block",height:"150px",width:"100%",position:"relative",overflow:"hidden",borderRadius:"5px"},children:[(0,i.jsx)("img",{src:s,alt:s,style:{width:"100%",height:"100%",objectFit:"cover",position:"absolute",zIndex:-1}}),(0,i.jsx)("h2",{style:{color:"white",padding:"12px",boxSizing:"border-box",paddingBottom:"0px",fontWeight:"500"},children:r}),(0,i.jsx)("p",{style:{color:"white",paddingTop:"0px",paddingBottom:"12px",paddingLeft:"12px",paddingRight:"12px",boxSizing:"border-box"},children:t})]})}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var a=t(6540);const i={},r=a.createContext(i);function s(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);