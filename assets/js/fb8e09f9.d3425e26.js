"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2630],{9932:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>m,toc:()=>p});var r=i(7462),a=(i(7294),i(3905)),e=i(814);const s={sidebar_position:6,description:"Matrix"},o="Matrix",m={unversionedId:"java/Matrix",id:"java/Matrix",title:"Matrix",description:"Matrix",source:"@site/docs/java/Matrix.mdx",sourceDirName:"java",slug:"/java/Matrix",permalink:"/docs/java/Matrix",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,description:"Matrix"},sidebar:"tutorialSidebar",previous:{title:"Student Details",permalink:"/docs/java/other/StudentDetail"},next:{title:"Algorithms",permalink:"/docs/category/algorithms"}},d={},p=[{value:"CODE",id:"code",level:2}],c={toc:p};function l(n){let{components:t,...i}=n;return(0,a.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"matrix"},"Matrix"),(0,a.kt)("h2",{id:"code"},"CODE"),(0,a.kt)(e.Z,{language:"java",mdxType:"CodeBlock"},'import java.util.*;\npublic class Matrix {\n    int m,n;\n    int[][] matrix,transpose;\n    Scanner sc= new Scanner(System.in);\n    void readSize(){\n        System.out.println("Enter M: ");\n        m=sc.nextInt();\n        System.out.println("Enter N: ");\n        n=sc.nextInt();\n       matrix =new int[m][n];\n      transpose =new int[n][m];\n    }\n    void readMatrix(){\n        System.out.println("Enter Matrix: ");\n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                System.out.println("Enter ["+i+"]["+j+"]");\n                matrix[i][j]=sc.nextInt();\n            }\n        }\n    }\n    void displayMatrix(){\n        System.out.println("Array: ");\n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                System.out.print(matrix[i][j]+" ");\n            }\n            System.out.println();\n        }\n    }\n\n    void transposeMatrix(){\n        System.out.println("Transpose: ");\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                transpose[i][j]=matrix[j][i];\n                System.out.print(transpose[i][j]+" ");\n            }\n            System.out.println();\n        }\n    }\n}\nclass AccessMatrix{\n    public static void main(String[] args) {\n        Matrix m= new Matrix();\n        m.readSize();\n        m.readMatrix();\n        m.displayMatrix();\n        m.transposeMatrix();\n    }\n}\n'))}l.isMDXComponent=!0}}]);