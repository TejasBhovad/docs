"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[3730],{7528:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=t(5893),r=t(1151);const s={},o="Pointers in C",a={id:"c/pointers/pointers",title:"Pointers in C",description:"1. WAP to add two numbers using pointers",source:"@site/docs/one/c/pointers/pointers.md",sourceDirName:"c/pointers",slug:"/c/pointers/",permalink:"/docs/one/c/pointers/",draft:!1,unlisted:!1,editUrl:"https://github.com/TejasBhovad/docs/docs/one/c/pointers/pointers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Patterns in C",permalink:"/docs/one/c/patterns/programs"},next:{title:"Recursion in C",permalink:"/docs/one/c/recursion/"}},d={},l=[{value:"1. WAP to add two numbers using pointers",id:"1-wap-to-add-two-numbers-using-pointers",level:3},{value:"Code:",id:"code",level:4},{value:"2. WAP to find maximum of two numbers using pointers",id:"2-wap-to-find-maximum-of-two-numbers-using-pointers",level:3},{value:"Code:",id:"code-1",level:4},{value:"3. WAP to swap two numbers using call by value and call by reference",id:"3-wap-to-swap-two-numbers-using-call-by-value-and-call-by-reference",level:3},{value:"Code:",id:"code-2",level:4},{value:"4. WAP to find sum of all elements of an Array using pointers",id:"4-wap-to-find-sum-of-all-elements-of-an-array-using-pointers",level:3},{value:"Code:",id:"code-3",level:4},{value:"5. WAP to sort an Array using pointers",id:"5-wap-to-sort-an-array-using-pointers",level:3},{value:"Code:",id:"code-4",level:4}];function c(n){const e={code:"code",h1:"h1",h3:"h3",h4:"h4",pre:"pre",...(0,r.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"pointers-in-c",children:"Pointers in C"}),"\n",(0,i.jsx)(e.h3,{id:"1-wap-to-add-two-numbers-using-pointers",children:"1. WAP to add two numbers using pointers"}),"\n",(0,i.jsx)(e.h4,{id:"code",children:"Code:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint main()\n{\n    int a = 10;\n    int b = 20;\n    int *x, *y;\n    x = &a;\n    y = &b;\n    printf("\\nSum: %d", *x + *y);\n    printf("\\n");\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"2-wap-to-find-maximum-of-two-numbers-using-pointers",children:"2. WAP to find maximum of two numbers using pointers"}),"\n",(0,i.jsx)(e.h4,{id:"code-1",children:"Code:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint main()\n{\n    int a = 10;\n    int b = 20;\n    int *x, *y;\n    x = &a;\n    y = &b;\n    int greatest;\n    if (*x > *y)\n    {\n        greatest = *x;\n    }\n    else\n    {\n        greatest = *y;\n    }\n    printf("\\nGreatest: %d", greatest);\n    printf("\\n");\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"3-wap-to-swap-two-numbers-using-call-by-value-and-call-by-reference",children:"3. WAP to swap two numbers using call by value and call by reference"}),"\n",(0,i.jsx)(e.h4,{id:"code-2",children:"Code:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nvoid callByReference(int *a, int *b)\n{\n    int tmp;\n    tmp = *a;\n    *a = *b;\n    *b = tmp;\n    printf("\\nAfter Call by Reference Swap:\\n");\n    printf("A: %d\\nB: %d", *a, *b);\n}\nvoid callByValue(int a, int b)\n{\n    int tmp;\n    tmp = a;\n    a = b;\n    b = tmp;\n    printf("\\nAfter Call by Value Swap:\\n");\n    printf("A: %d\\nB: %d", a, b);\n}\nint main()\n{\n    int A, B;\n    printf("\\nEnter value of A: ");\n    scanf("%d", &A);\n    printf("\\nEnter value of B: ");\n    scanf("%d", &B);\n    callByValue(A, B);\n    callByReference(&A, &B);\n    printf("\\n");\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"4-wap-to-find-sum-of-all-elements-of-an-array-using-pointers",children:"4. WAP to find sum of all elements of an Array using pointers"}),"\n",(0,i.jsx)(e.h4,{id:"code-3",children:"Code:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint arSum(int *ptr)\n{\n    int sum = 0;\n    for (int i = 0; i < 5; i++)\n    {\n        sum = sum + *(ptr + i);\n    }\n    return sum;\n}\n\nint main()\n{\n    int ar[5];\n    printf("Enter 5 Elements: \\n");\n    for (int i = 0; i < 5; i++)\n    {\n        scanf("%d", &ar[i]);\n    }\n    int sum = arSum(ar);\n    printf("Sum: %d", sum);\n    printf("\\n");\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"5-wap-to-sort-an-array-using-pointers",children:"5. WAP to sort an Array using pointers"}),"\n",(0,i.jsx)(e.h4,{id:"code-4",children:"Code:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nvoid sort(int *ptr)\n{\n    for (int i = 0; i < 10; i++)\n    {\n        for (int j = 0; j < 10; j++)\n        {\n            if (*(ptr + i) < *(ptr + j))\n            {\n                int tmp = *(ptr + i);\n                *(ptr + i) = *(ptr + j);\n                *(ptr + j) = tmp;\n            }\n        }\n    }\n}\n\nint main()\n{\n    int ar[10];\n    printf("Enter 10 Elements: \\n");\n    for (int i = 0; i < 10; i++)\n    {\n        scanf("%d", &ar[i]);\n    }\n    sort(ar);\n    printf("\\nAfter Sorting:\\n");\n    for (int i = 0; i < 10; i++)\n    {\n        printf("%d", *(ar + i));\n        printf(" ");\n    }\n    printf("\\n");\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>a,a:()=>o});var i=t(7294);const r={},s=i.createContext(r);function o(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);