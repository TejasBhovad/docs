"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[8969],{5873:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>c,metadata:()=>h,toc:()=>g});var e=i(5893),r=i(1151),s=i(9286);const a='// Write a program to implement Na\xefve String Matching Algorithm.\n#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n    char text[100], pattern[100];\n    printf("Enter the text: ");\n    scanf("%s", text);\n    printf("Enter the pattern: ");\n    scanf("%s", pattern);\n    int n = strlen(text);\n    int m = strlen(pattern);\n    for (int i = 0; i <= n - m; i++)\n    {\n        int j;\n        for (j = 0; j < m; j++)\n        {\n            if (text[i + j] != pattern[j])\n            {\n                break;\n            }\n        }\n        if (j == m)\n        {\n            printf("Pattern found at index %d\\n", i);\n        }\n    }\n    return 0;\n}',c={sidebar_position:15,description:"String matching in C"},o="String Matching",h={id:"algorithms/stringMatch",title:"String Matching",description:"String matching in C",source:"@site/docs/three/algorithms/stringMatch.mdx",sourceDirName:"algorithms",slug:"/algorithms/stringMatch",permalink:"/docs/three/algorithms/stringMatch",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15,description:"String matching in C"},sidebar:"tutorialSidebar",previous:{title:"8 Queens in C",permalink:"/docs/three/algorithms/8queens"},next:{title:"R Scripts",permalink:"/docs/three/category/r-scripts"}},d={},g=[{value:"CODE",id:"code",level:2}];function l(n){const t={h1:"h1",h2:"h2",...(0,r.a)(),...n.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:"string-matching",children:"String Matching"}),"\n",(0,e.jsx)(t.h2,{id:"code",children:"CODE"}),"\n",(0,e.jsx)(s.Z,{language:"c",children:a})]})}function m(n={}){const{wrapper:t}={...(0,r.a)(),...n.components};return t?(0,e.jsx)(t,{...n,children:(0,e.jsx)(l,{...n})}):l(n)}}}]);