"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[6479],{7360:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>h,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"algorithms/stringMatch","title":"String Matching","description":"String matching in C","source":"@site/docs/three/algorithms/stringMatch.mdx","sourceDirName":"algorithms","slug":"/algorithms/stringMatch","permalink":"/docs/three/algorithms/stringMatch","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15,"description":"String matching in C"},"sidebar":"tutorialSidebar","previous":{"title":"8 Queens in C","permalink":"/docs/three/algorithms/8queens"},"next":{"title":"R Scripts","permalink":"/docs/three/category/r-scripts"}}');var r=e(4848),s=e(8453),a=e(1432);const c='// Write a program to implement Na\xefve String Matching Algorithm.\n#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n    char text[100], pattern[100];\n    printf("Enter the text: ");\n    scanf("%s", text);\n    printf("Enter the pattern: ");\n    scanf("%s", pattern);\n    int n = strlen(text);\n    int m = strlen(pattern);\n    for (int i = 0; i <= n - m; i++)\n    {\n        int j;\n        for (j = 0; j < m; j++)\n        {\n            if (text[i + j] != pattern[j])\n            {\n                break;\n            }\n        }\n        if (j == m)\n        {\n            printf("Pattern found at index %d\\n", i);\n        }\n    }\n    return 0;\n}',o={sidebar_position:15,description:"String matching in C"},h="String Matching",d={},l=[{value:"CODE",id:"code",level:2}];function g(n){const t={h1:"h1",h2:"h2",header:"header",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"string-matching",children:"String Matching"})}),"\n",(0,r.jsx)(t.h2,{id:"code",children:"CODE"}),"\n",(0,r.jsx)(a.A,{language:"c",children:c})]})}function p(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(g,{...n})}):g(n)}}}]);