"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[510],{8712:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>u,metadata:()=>a,toc:()=>d});var t=r(7462),i=(r(7294),r(3905)),o=r(814);const u={sidebar_position:1,description:"Queues Operations Program"},s="Queues Operations",a={unversionedId:"queues/queue-operations",id:"queues/queue-operations",title:"Queues Operations",description:"Queues Operations Program",source:"@site/docs/queues/queue-operations.mdx",sourceDirName:"queues",slug:"/queues/queue-operations",permalink:"/docs/queues/queue-operations",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Queues Operations Program"},sidebar:"tutorialSidebar",previous:{title:"Queues",permalink:"/docs/category/queues"},next:{title:"Journal",permalink:"/docs/category/journal"}},p={},d=[],c={toc:d};function f(n){let{components:e,...r}=n;return(0,i.kt)("wrapper",(0,t.Z)({},c,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"queues-operations"},"Queues Operations"),(0,i.kt)(o.Z,{language:"c",mdxType:"CodeBlock"},'#include <stdio.h>\n\n// GLOBAL VARIABLES\nint front = -1, rear = -1;\nint N;\n\n// FUNCTION PROTOTYPE\nvoid enqueue(int *ptr, int x);\nvoid dequeue(int *ptr);\nvoid display(int *ptr);\n\nint main()\n{\n    printf("Enter N : \\n");\n    scanf("%d", &N);\n    int ar[N], choice;\n    do\n    {\n        printf("\\nEnter Choice:");\n        printf("\\n1. Queue");\n        printf("\\n2. Dequeue");\n        printf("\\n3. Display");\n        printf("\\n4. Exit\\n");\n        scanf("%d", &choice);\n        switch (choice)\n        {\n        case 1:\n        {\n            int x;\n            printf("\\nEnter Element to Queue: ");\n            scanf("%d", &x);\n            enqueue(ar, x);\n            break;\n        }\n        case 2:\n        {\n            dequeue(ar);\n            break;\n        }\n        case 3:\n        {\n            display(ar);\n            break;\n        }\n        case 4:\n        {\n            printf("");\n            break;\n        }\n\n        default:\n        {\n            printf("\\nInvalid choice");\n            break;\n        }\n        }\n    } while (choice != 4);\n    printf("\\n");\n    return 0;\n}\n\n// ENQUEUE FUNCTION\nvoid enqueue(int *ptr, int x)\n{\n    if (rear == N - 1)\n    {\n        printf("\\nOverflow Error");\n    }\n    else\n    {\n        if (rear == -1 && front == -1)\n        {\n            front = 0;\n            rear = 0;\n            *(ptr + rear) = x;\n        }\n        else\n        {\n            rear++;\n            *(ptr + rear) = x;\n        }\n    }\n}\n\n// DEQUEUE FUNCTION\nvoid dequeue(int *ptr)\n{\n    if (front > rear || front == -1 && rear == -1)\n    {\n        printf("\\nUnderflow Error");\n    }\n    else\n    {\n        printf("\\n%d is Dequeued", *(ptr + front));\n        front++;\n    }\n}\n\n// DISPLAY FUNCTION\nvoid display(int *ptr)\n{\n    printf("\\nElements in Queue: \\n");\n    for (int i = front; i <= rear; i++)\n    {\n        printf(" %d", *(ptr + i));\n    }\n}'))}f.isMDXComponent=!0}}]);