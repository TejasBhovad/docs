"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[28],{8328:(n,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var i=t(5893),e=t(1151),o=t(9286);const s='#include <stdio.h>\nint i, j, k, N = 5, ar[5];\nvoid read()\n{\n    printf("Enter the elements: \\n");\n    for (i = 0; i < N; i++)\n    {\n        printf("ar[%d] : ", i);\n        scanf("%d", &ar[i]);\n    }\n}\nvoid display()\n{\n    printf("\\nArray: ");\n    for (i = 0; i < N; i++)\n    {\n        printf("%d ", ar[i]);\n    }\n}\nvoid sort()\n{\n    int temp;\n    for (j = 1; j < N; j++)\n    {\n        temp = ar[j];\n        k = j - 1;\n        while (k >= 0 && ar[k] > temp)\n        {\n            ar[k + 1] = ar[k];\n            k--;\n        }\n        ar[k + 1] = temp;\n    }\n}\nint main()\n{\n    read();\n    display();\n    sort();\n    display();\n    return 0;\n}',a={sidebar_position:4,description:"Insertion Sort in C"},d="Insertion Sort",c={id:"algorithms/insertionSort",title:"Insertion Sort",description:"Insertion Sort in C",source:"@site/docs/three/algorithms/insertionSort.mdx",sourceDirName:"algorithms",slug:"/algorithms/insertionSort",permalink:"/docs/three/algorithms/insertionSort",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Insertion Sort in C"},sidebar:"tutorialSidebar",previous:{title:"Selection Sort",permalink:"/docs/three/algorithms/selectionSort"},next:{title:"Binary Search",permalink:"/docs/three/algorithms/binarySearch"}},l={},h=[{value:"CODE",id:"code",level:2}];function p(n){const r={h1:"h1",h2:"h2",...(0,e.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"insertion-sort",children:"Insertion Sort"}),"\n",(0,i.jsx)(r.h2,{id:"code",children:"CODE"}),"\n",(0,i.jsx)(o.Z,{language:"c",children:s})]})}function m(n={}){const{wrapper:r}={...(0,e.a)(),...n.components};return r?(0,i.jsx)(r,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}}}]);