"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[1056],{1089:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>j,frontMatter:()=>m,metadata:()=>e,toc:()=>u});const e=JSON.parse('{"id":"java/other/ProdMat","title":"Matrix Product","description":"Matrix Product in Java","source":"@site/docs/three/java/other/ProdMat.mdx","sourceDirName":"java/other","slug":"/java/other/ProdMat","permalink":"/docs/three/java/other/ProdMat","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"sidebar_position":14,"description":"Matrix Product in Java"},"sidebar":"tutorialSidebar","previous":{"title":"Diagonal Sum Matrix","permalink":"/docs/three/java/other/DiagSum"},"next":{"title":"Thread methods","permalink":"/docs/three/java/other/Thread"}}');var r=i(4848),o=i(8453),a=i(1432);const s='// WAP to find product of user defined 2 arrays of size m,n\n\nimport java.util.Scanner;\n\npublic class ProdMat {\n    public static void main(String[] args) {\n        int m1, m2, n1, n2;\n        Scanner sc = new Scanner(System.in);\n        System.out.println("Enter the number of rows: ");\n        m1 = sc.nextInt();\n        System.out.println("Enter the number of columns: ");\n        n1 = sc.nextInt();\n        int mat1[][] = new int[m1][n1];\n        for (int i = 0; i < m1; i++) {\n            System.out.println("Enter the elements of row " + (i + 1) + ": ");\n            for (int j = 0; j < n1; j++)\n                mat1[i][j] = sc.nextInt();\n        }\n        System.out.println("Original matrix 1: ");\n        for (int i = 0; i < m1; i++) {\n            for (int j = 0; j < n1; j++)\n                System.out.print(mat1[i][j] + " ");\n            System.out.println();\n        }\n        System.out.println("Enter the number of rows: ");\n        m2 = sc.nextInt();\n        System.out.println("Enter the number of columns: ");\n        n2 = sc.nextInt();\n        int mat2[][] = new int[m2][n2];\n        for (int i = 0; i < m2; i++) {\n            System.out.println("Enter the elements of row " + (i + 1) + ": ");\n            for (int j = 0; j < n2; j++)\n                mat2[i][j] = sc.nextInt();\n        }\n        System.out.println("Original matrix 2: ");\n        for (int i = 0; i < m2; i++) {\n            for (int j = 0; j < n2; j++)\n                System.out.print(mat2[i][j] + " ");\n            System.out.println();\n        }\n        System.out.println("Product of matrices: ");\n        int mat3[][] = new int[m1][n2];\n        for (int i = 0; i < m1; i++)\n            for (int j = 0; j < n2; j++)\n                for (int k = 0; k < n1; k++)\n                    mat3[i][j] += mat1[i][k] * mat2[k][j];\n\n        for (int i = 0; i < m1; i++) {\n            for (int j = 0; j < n2; j++)\n                System.out.print(mat3[i][j] + " ");\n            System.out.println();\n        }\n\n    }\n}\n',m={sidebar_position:14,description:"Matrix Product in Java"},c="Matrix Product",d={},u=[{value:"CODE",id:"code",level:2}];function l(n){const t={h1:"h1",h2:"h2",header:"header",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"matrix-product",children:"Matrix Product"})}),"\n",(0,r.jsx)(t.h2,{id:"code",children:"CODE"}),"\n",(0,r.jsx)(a.A,{language:"java",children:s})]})}function j(n={}){const{wrapper:t}={...(0,o.R)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}}}]);