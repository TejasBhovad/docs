"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[779],{2209:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>u,default:()=>l,frontMatter:()=>a,metadata:()=>d,toc:()=>f});var i=t(7462),r=(t(7294),t(3905)),s=t(814),o=t(9512);const a={sidebar_position:6,description:"Graphs in C"},u="Graphs Traversal",d={unversionedId:"Graphs/DFS_BFS",id:"Graphs/DFS_BFS",title:"Graphs Traversal",description:"Graphs in C",source:"@site/docs/Graphs/DFS_BFS.mdx",sourceDirName:"Graphs",slug:"/Graphs/DFS_BFS",permalink:"/docs/Graphs/DFS_BFS",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,description:"Graphs in C"},sidebar:"tutorialSidebar",previous:{title:"DFS and BFS",permalink:"/docs/category/dfs-and-bfs"},next:{title:"Journal",permalink:"/docs/category/journal"}},p={},f=[],c={toc:f};function l(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,i.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"graphs-traversal"},"Graphs Traversal"),(0,r.kt)(s.Z,{language:"c",mdxType:"CodeBlock"},o.Z))}l.isMDXComponent=!0},9512:(n,e,t)=>{t.d(e,{Z:()=>i});const i='#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_NODES 100\n\ntypedef struct Queue\n{\n    int arr[MAX_NODES];\n    int front, rear;\n} Queue;\n\nvoid init(Queue *q)\n{\n    q->front = q->rear = -1;\n}\n\nvoid enqueue(Queue *q, int node)\n{\n    if (q->rear == MAX_NODES - 1)\n    {\n        printf("Queue is full\\n");\n        return;\n    }\n    q->arr[++q->rear] = node;\n    if (q->front == -1)\n    {\n        q->front = 0;\n    }\n}\n\nint dequeue(Queue *q)\n{\n    if (q->front == -1 || q->front > q->rear)\n    {\n        printf("Queue is empty\\n");\n        return -1;\n    }\n    int node = q->arr[q->front++];\n    return node;\n}\n\nvoid bfs(int graph[MAX_NODES][MAX_NODES], int n)\n{\n    bool visited[MAX_NODES] = {false};\n    Queue queue;\n    init(&queue);\n    enqueue(&queue, 0);\n    visited[0] = true;\n    while (queue.front <= queue.rear)\n    {\n        int node = dequeue(&queue);\n        printf("%d ", node);\n        for (int i = 0; i < n; i++)\n        {\n            if (graph[node][i] == 1 && !visited[i])\n            {\n                visited[i] = true;\n                enqueue(&queue, i);\n            }\n        }\n    }\n    printf("\\n");\n}\n\nvoid dfs(int graph[MAX_NODES][MAX_NODES], int n)\n{\n    bool visited[MAX_NODES] = {false};\n    int stack[MAX_NODES];\n    int top = -1;\n    stack[++top] = 0;\n    visited[0] = true;\n    while (top != -1)\n    {\n        int node = stack[top--];\n        printf("%d ", node);\n        for (int i = 0; i < n; i++)\n        {\n            if (graph[node][i] == 1 && !visited[i])\n            {\n                visited[i] = true;\n                stack[++top] = i;\n            }\n        }\n    }\n    printf("\\n");\n}\n\nint main()\n{\n    int graph[MAX_NODES][MAX_NODES] = {{0, 1, 1, 0, 0, 0, 0, 0},\n                                       {1, 0, 0, 1, 1, 1, 0, 0},\n                                       {1, 0, 0, 0, 0, 1, 1, 1},\n                                       {0, 1, 0, 0, 0, 0, 0, 0},\n                                       {0, 1, 0, 0, 0, 0, 0, 0},\n                                       {0, 1, 1, 0, 0, 0, 0, 0},\n                                       {0, 0, 1, 0, 0, 0, 0, 0},\n                                       {0, 0, 1, 0, 0, 0, 0, 0}};\n    int n = 8;\n    printf("BFS: ");\n    bfs(graph, n);\n    printf("DFS: ");\n    dfs(graph, n);\n    return 0;\n}\n'}}]);