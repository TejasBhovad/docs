"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8376],{4578:(n,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>f});var e=t(7462),o=(t(7294),t(3905)),r=t(814);const a={sidebar_position:8,description:"Knapsack problem in C"},p="Knapsack problem",s={unversionedId:"algorithms/quickSort copy",id:"algorithms/quickSort copy",title:"Knapsack problem",description:"Knapsack problem in C",source:"@site/docs/algorithms/quickSort copy.mdx",sourceDirName:"algorithms",slug:"/algorithms/quickSort copy",permalink:"/docs/algorithms/quickSort copy",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,description:"Knapsack problem in C"},sidebar:"tutorialSidebar",previous:{title:"Quick Sort",permalink:"/docs/algorithms/quickSort"},next:{title:"C Programs",permalink:"/docs/c/"}},c={},f=[{value:"CODE",id:"code",level:2}],l={toc:f};function m(n){let{components:i,...t}=n;return(0,o.kt)("wrapper",(0,e.Z)({},l,t,{components:i,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"knapsack-problem"},"Knapsack problem"),(0,o.kt)("h2",{id:"code"},"CODE"),(0,o.kt)(r.Z,{language:"c",mdxType:"CodeBlock"},'// WAP to create a knapsack problem using greedy method.\n#include <stdio.h>\nint main()\n{\n    int n, i, j;\n    printf("Enter the number of items: ");\n    scanf("%d", &n);\n    float w[n], p[n], r[n], x[n];\n    printf("Enter the weights of the items: \\n");\n    for (i = 0; i < n; i++)\n        scanf("%f", &w[i]);\n    printf("Enter the profits of the items: \\n");\n    for (i = 0; i < n; i++)\n        scanf("%f", &p[i]);\n    printf("Enter the capacity of the knapsack: ");\n    float cap;\n    scanf("%f", &cap);\n    // calculating the ratio\n    for (i = 0; i < n; i++)\n        r[i] = p[i] / w[i];\n\n    // sort the ratio\n    for (i = 0; i < n; i++)\n    {\n        for (j = i + 1; j < n; j++)\n        {\n            if (r[i] < r[j])\n            {\n                int temp = r[i];\n                r[i] = r[j];\n                r[j] = temp;\n                temp = w[i];\n                w[i] = w[j];\n                w[j] = temp;\n                temp = p[i];\n                p[i] = p[j];\n                p[j] = temp;\n            }\n        }\n    }\n    // knapsack logic fractional\n    float tp = 0;\n    for (i = 0; i < n; i++)\n        x[i] = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (w[i] > cap)\n            break;\n        else\n        {\n            x[i] = 1;\n            tp += p[i];\n            cap -= w[i];\n        }\n    }\n    if (i < n)\n    {\n        x[i] = cap / w[i];\n        tp += x[i] * p[i];\n    }\n    printf("The solution vector is: ");\n    for (i = 0; i < n; i++)\n        printf("%f ", x[i]);\n    printf("\\nThe total profit is: %f\\n", tp);\n    return 0;\n}'))}m.isMDXComponent=!0}}]);