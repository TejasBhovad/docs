"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[106],{7869:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>h});var i=r(7462),a=(r(7294),r(3905)),t=r(814);const c={sidebar_position:1,description:"Binary Search [ RECURSION ]"},s="Binary Search [ RECURSION ]",o={unversionedId:"BinarySearch/recursion",id:"BinarySearch/recursion",title:"Binary Search [ RECURSION ]",description:"Binary Search [ RECURSION ]",source:"@site/docs/BinarySearch/recursion.mdx",sourceDirName:"BinarySearch",slug:"/BinarySearch/recursion",permalink:"/docs/BinarySearch/recursion",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Binary Search [ RECURSION ]"},sidebar:"tutorialSidebar",previous:{title:"Binary Search [ WHILE ]",permalink:"/docs/BinarySearch/BS"},next:{title:"Hash Tables",permalink:"/docs/category/hash-tables"}},d={},h=[],l={toc:h};function u(n){let{components:e,...r}=n;return(0,a.kt)("wrapper",(0,i.Z)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"binary-search--recursion-"},"Binary Search ","[ RECURSION ]"),(0,a.kt)(t.Z,{language:"c",mdxType:"CodeBlock"},'#include <stdio.h>\nint N, key, ar[100];\nint flag = 0;\nint beg, mid, end;\nint bSearch()\n{\n\n    mid = (beg + end) / 2;\n    if (end >= mid)\n    {\n        if (key == ar[mid])\n        {\n            flag = 1;\n            printf("Index: %d", mid);\n            return 1;\n        }\n        else if (key > ar[mid])\n        {\n            beg = mid + 1;\n            bSearch();\n        }\n        else\n        {\n            end = mid-1;\n            bSearch();\n        }\n    }\n    return flag;\n}\nint main()\n{\n    printf("\\nEnter Size of Array: \\n");\n    scanf("%d", &N);\n    for (int i = 0; i < N; i++)\n    {\n        printf("Enter Element(%d): ", i);\n        scanf("%d", &ar[i]);\n    }\n    printf("\\nEnter Element to be searched: ");\n    scanf("%d", &key);\n    beg = 0;\n    end = N;\n    if (bSearch())\n    {\n        printf("\\nElement found\\n");\n    }\n    else\n    {\n        printf("\\nElement Not found\\n");\n    }\n    return 0;\n}\n'))}u.isMDXComponent=!0}}]);