"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[421],{5314:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>h,contentTitle:()=>o,default:()=>S,frontMatter:()=>d,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"Data Structures/BinarySearch/BS","title":"Binary Search [ WHILE ]","description":"Binary Search","source":"@site/docs/two/Data Structures/BinarySearch/BS.mdx","sourceDirName":"Data Structures/BinarySearch","slug":"/Data Structures/BinarySearch/BS","permalink":"/docs/two/Data Structures/BinarySearch/BS","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"description":"Binary Search"},"sidebar":"tutorialSidebar","previous":{"title":"Binary Search","permalink":"/docs/two/category/binary-search"},"next":{"title":"Binary Search [ RECURSION ]","permalink":"/docs/two/Data Structures/BinarySearch/recursion"}}');var i=r(4848),a=r(8453),s=r(1432),c=r(8018);const d={sidebar_position:1,description:"Binary Search"},o="Binary Search [ WHILE ]",h={},u=[];function l(n){const e={h1:"h1",header:"header",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"binary-search--while-",children:"Binary Search [ WHILE ]"})}),"\n",(0,i.jsx)(s.A,{language:"c",children:c.A})]})}function S(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},8018:(n,e,r)=>{r.d(e,{A:()=>t});const t='#include <stdio.h>\nint N, key, ar[100];\nint bSearch()\n{\n    int beg, mid, end;\n    beg = 0;\n    end = N;\n    int flag = 0;\n    mid = (beg + end) / 2;\n    while (end >= mid)\n    {\n\n        if (key == ar[mid])\n        {\n            flag = 1;\n            printf("Index: %d", mid);\n            return 1;\n        }\n        else if (key > ar[mid])\n        {\n            beg = mid + 1;\n            mid = (beg + end) / 2;\n        }\n        else\n        {\n            end = mid-1;\n            mid = (beg + end) / 2;\n        }\n    }\n    return flag;\n}\nint main()\n{\n    printf("\\nEnter Size of Array: \\n");\n    scanf("%d", &N);\n    for (int i = 0; i < N; i++)\n    {\n        printf("Enter Element(%d): ", i);\n        scanf("%d", &ar[i]);\n    }\n    printf("\\nEnter Element to be searched: ");\n    scanf("%d", &key);\n    if (bSearch())\n    {\n        printf("\\nElement found\\n");\n    }\n    else\n    {\n        printf("\\nElement Not found\\n");\n    }\n    return 0;\n}\n'}}]);