"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[6980],{4740:(t,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var e=n(5893),o=n(1151),s=n(9163);const r={title:"Partitioning Algorithms",sidebar_position:9,description:"Partitioning Algorithm"},l="Operating System",c={id:"os/partition",title:"Partitioning Algorithms",description:"Partitioning Algorithm",source:"@site/docs/four/os/partition.mdx",sourceDirName:"os",slug:"/os/partition",permalink:"/docs/four/os/partition",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Partitioning Algorithms",sidebar_position:9,description:"Partitioning Algorithm"},sidebar:"tutorialSidebar",previous:{title:"Page replacenent Algorithm",permalink:"/docs/four/os/page"},next:{title:"Disk Partition",permalink:"/docs/four/os/disk"}},a={},p=[{value:"Partitioning Algorithms",id:"partitioning-algorithms",level:2},{value:"First Fit",id:"first-fit",level:3},{value:"Best Fit",id:"best-fit",level:3},{value:"Worst Fit",id:"worst-fit",level:3},{value:"Questions",id:"questions",level:2}];function d(t){const i={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...t.components},{Details:n}=i;return n||function(t,i){throw new Error("Expected "+(i?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(i.h1,{id:"operating-system",children:(0,e.jsx)(s.Z,{name:"banner",description:"Partitioning Algorithm",children:"Operating System"})}),"\n",(0,e.jsx)(i.h2,{id:"partitioning-algorithms",children:"Partitioning Algorithms"}),"\n",(0,e.jsx)(i.p,{children:"Partitioning algorithms are used to divide the memory into partitions to allocate memory to processes. There are two types of partitioning algorithms:"}),"\n",(0,e.jsxs)(i.ol,{children:["\n",(0,e.jsx)(i.li,{children:"First Fit"}),"\n",(0,e.jsx)(i.li,{children:"Best Fit"}),"\n",(0,e.jsx)(i.li,{children:"Worst Fit"}),"\n"]}),"\n",(0,e.jsx)(i.h3,{id:"first-fit",children:"First Fit"}),"\n",(0,e.jsx)(i.p,{children:"In the first fit algorithm, the memory is divided into partitions and the first partition that is large enough to fit the process is allocated to the process. The process is allocated to the first partition that is large enough to fit the process."}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\nvoid firstFit(int bSize[], int bCount, int pSize[], int pCount) {\n    int bAlloc[pCount];\n    int bOccupied[bCount];\n\n    // Initialize block allocation and occupation arrays\n    for (int i = 0; i < pCount; i++) {\n        bAlloc[i] = -1;\n    }\n    for (int i = 0; i < bCount; i++) {\n        bOccupied[i] = 0;\n    }\n\n    // Allocate processes to blocks\n    for (int p = 0; p < pCount; p++) {\n        for (int b = 0; b < bCount; b++) {\n            if (!bOccupied[b] && bSize[b] >= pSize[p]) {\n                bAlloc[p] = b;\n                bOccupied[b] = 1;\n                break;\n            }\n        }\n    }\n\n    // Print the allocation results\n    printf("Process\\tSize\\tBlock\\n");\n    for (int p = 0; p < pCount; p++) {\n        printf("%d\\t%d\\t", p + 1, pSize[p]);\n        if (bAlloc[p] != -1) {\n            printf("%d\\n", bAlloc[p] + 1);\n        } else {\n            printf("Not Allocated\\n");\n        }\n    }\n}\n\nint main() {\n    int bSize[] = {30, 5, 10};\n    int pSize[] = {10, 6, 9};\n    int bCount = sizeof(bSize) / sizeof(bSize[0]);\n    int pCount = sizeof(pSize) / sizeof(pSize[0]);\n\n    firstFit(bSize, bCount, pSize, pCount);\n    return 0;\n}\n\n'})}),"\n",(0,e.jsx)(i.h3,{id:"best-fit",children:"Best Fit"}),"\n",(0,e.jsx)(i.p,{children:"In the best fit algorithm, the memory is divided into partitions and the partition that is closest in size to the process is allocated to the process. The process is allocated to the partition that is closest in size to the process."}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\nvoid bestFit(int bSize[], int bCount, int pSize[], int pCount) {\n    int bAlloc[pCount];\n    int bOccupied[bCount];\n\n    // Initialize block allocation and occupation arrays\n    for (int i = 0; i < pCount; i++) {\n        bAlloc[i] = -1;\n    }\n    for (int i = 0; i < bCount; i++) {\n        bOccupied[i] = 0;\n    }\n\n    // Allocate processes to blocks using Best Fit\n    for (int p = 0; p < pCount; p++) {\n        int bestBlock = -1;\n        for (int b = 0; b < bCount; b++) {\n            if (!bOccupied[b] && bSize[b] >= pSize[p]) {\n                if (bestBlock == -1 || bSize[b] < bSize[bestBlock]) {\n                    bestBlock = b;\n                }\n            }\n        }\n        if (bestBlock != -1) {\n            bAlloc[p] = bestBlock;\n            bOccupied[bestBlock] = 1;\n        }\n    }\n\n    // Print the allocation results\n    printf("Process\\tSize\\tBlock\\n");\n    for (int p = 0; p < pCount; p++) {\n        printf("%d\\t%d\\t", p + 1, pSize[p]);\n        if (bAlloc[p] != -1) {\n            printf("%d\\n", bAlloc[p] + 1);\n        } else {\n            printf("Not Allocated\\n");\n        }\n    }\n}\n\nint main() {\n    int bSize[] = {30, 5, 10};\n    int pSize[] = {10, 6, 9};\n    int bCount = sizeof(bSize) / sizeof(bSize[0]);\n    int pCount = sizeof(pSize) / sizeof(pSize[0]);\n\n    bestFit(bSize, bCount, pSize, pCount);\n    return 0;\n}\n\n'})}),"\n",(0,e.jsx)(i.h3,{id:"worst-fit",children:"Worst Fit"}),"\n",(0,e.jsx)(i.p,{children:"In the worst fit algorithm, the memory is divided into partitions and the largest partition that is large enough to fit the process is allocated to the process. The process is allocated to the largest partition that is large enough to fit the process."}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\nvoid worstFit(int bSize[], int bCount, int pSize[], int pCount) {\n    int bAlloc[pCount];\n    int bOccupied[bCount];\n\n    // Initialize block allocation and occupation arrays\n    for (int i = 0; i < pCount; i++) {\n        bAlloc[i] = -1;\n    }\n    for (int i = 0; i < bCount; i++) {\n        bOccupied[i] = 0;\n    }\n\n    // Allocate processes to blocks using Worst Fit\n    for (int p = 0; p < pCount; p++) {\n        int worstBlock = -1;\n        for (int b = 0; b < bCount; b++) {\n            if (!bOccupied[b] && bSize[b] >= pSize[p]) {\n                if (worstBlock == -1 || bSize[b] > bSize[worstBlock]) {\n                    worstBlock = b;\n                }\n            }\n        }\n        if (worstBlock != -1) {\n            bAlloc[p] = worstBlock;\n            bOccupied[worstBlock] = 1;\n        }\n    }\n\n    // Print the allocation results\n    printf("Process\\tSize\\tBlock\\n");\n    for (int p = 0; p < pCount; p++) {\n        printf("%d\\t%d\\t", p + 1, pSize[p]);\n        if (bAlloc[p] != -1) {\n            printf("%d\\n", bAlloc[p] + 1);\n        } else {\n            printf("Not Allocated\\n");\n        }\n    }\n}\n\nint main() {\n    int bSize[] = {30, 5, 10};\n    int pSize[] = {10, 6, 9};\n    int bCount = sizeof(bSize) / sizeof(bSize[0]);\n    int pCount = sizeof(pSize) / sizeof(pSize[0]);\n\n    worstFit(bSize, bCount, pSize, pCount);\n    return 0;\n}\n\n'})}),"\n",(0,e.jsxs)(i.p,{children:["To compile and run the program, use the following commands(dont copy the ",(0,e.jsx)(i.code,{children:"$"})," sign, it represents the terminal prompt):"]}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-bash",children:"$ gcc partition.c -o partition\n$ ./partition\n"})}),"\n",(0,e.jsxs)(i.blockquote,{children:["\n",(0,e.jsx)(i.p,{children:"This program demonstrates the first fit, best fit, and worst fit partitioning algorithms to allocate memory to processes."}),"\n"]}),"\n",(0,e.jsx)(i.h2,{id:"questions",children:"Questions"}),"\n",(0,e.jsxs)(n,{children:[(0,e.jsx)("summary",{children:"What is the use of partitioning algorithms?"}),(0,e.jsx)("div",{children:(0,e.jsx)(i.p,{children:"Partitioning algorithms are used to divide the memory into partitions to\nallocate memory to processes."})})]}),"\n",(0,e.jsxs)(n,{children:[(0,e.jsx)("summary",{children:(0,e.jsx)(i.p,{children:"What is the difference between first fit, best fit, and worst fit\nalgorithms?"})}),(0,e.jsx)("div",{children:(0,e.jsxs)(i.ul,{children:["\n",(0,e.jsx)(i.li,{children:"First Fit: The first partition that is large enough to fit the process is\nallocated to the process. - Best Fit: The partition that is closest in size\nto the process is allocated to the process. - Worst Fit: The largest\npartition that is large enough to fit the process is allocated to the\nprocess."}),"\n"]})})]}),"\n",(0,e.jsxs)(n,{children:[(0,e.jsx)("summary",{children:"What is the output of the program?"}),(0,e.jsx)("div",{children:(0,e.jsx)(i.p,{children:"The program will allocate memory to processes using first fit, best fit, and\nworst fit algorithms."})})]}),"\n",(0,e.jsxs)(n,{children:[(0,e.jsxs)("summary",{children:["What is the use of ",(0,e.jsx)(i.code,{children:"processes"})," array?"]}),(0,e.jsx)("div",{children:(0,e.jsxs)(i.p,{children:["The ",(0,e.jsx)(i.code,{children:"processes"})," array contains the processes to be allocated memory."]})})]})]})}function h(t={}){const{wrapper:i}={...(0,o.a)(),...t.components};return i?(0,e.jsx)(i,{...t,children:(0,e.jsx)(d,{...t})}):d(t)}},9163:(t,i,n)=>{n.d(i,{Z:()=>s});n(7294);var e=n(4996),o=n(5893);const s=t=>{let{name:i,description:n,children:s}=t;const r=(0,e.Z)(`/images/${i}.png`);return(0,o.jsxs)("div",{style:{display:"inline-block",height:"150px",width:"100%",position:"relative",overflow:"hidden",borderRadius:"5px"},children:[(0,o.jsx)("img",{src:r,alt:r,style:{width:"100%",height:"100%",objectFit:"cover",position:"absolute",zIndex:-1}}),(0,o.jsx)("h2",{style:{color:"white",padding:"12px",boxSizing:"border-box",paddingBottom:"0px",fontWeight:"500"},children:s}),(0,o.jsx)("p",{style:{color:"white",paddingTop:"0px",paddingBottom:"12px",paddingLeft:"12px",paddingRight:"12px",boxSizing:"border-box"},children:n})]})}},1151:(t,i,n)=>{n.d(i,{Z:()=>l,a:()=>r});var e=n(7294);const o={},s=e.createContext(o);function r(t){const i=e.useContext(s);return e.useMemo((function(){return"function"==typeof t?t(i):{...i,...t}}),[i,t])}function l(t){let i;return i=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:r(t.components),e.createElement(s.Provider,{value:i},t.children)}}}]);