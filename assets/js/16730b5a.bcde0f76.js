"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[9648],{8264:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"java/Rectangle","title":"Rectangle Square Area","description":"Rectangle Square Area in Java","source":"@site/docs/three/java/Rectangle.mdx","sourceDirName":"java","slug":"/java/Rectangle","permalink":"/docs/three/java/Rectangle","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"description":"Rectangle Square Area in Java"},"sidebar":"tutorialSidebar","previous":{"title":"Prime Numbers from 1 to 1000","permalink":"/docs/three/java/Prime"},"next":{"title":"Overloading Area Method","permalink":"/docs/three/java/Overload"}}');var t=n(4848),i=n(8453),s=n(1432);const c="public class AccessArea {\n    public static void main(String[] args) {\n    Rectangle rec =new Rectangle();\n    Square sq=new Square();\n    System.out.println(rec.getArea(2,3));\n    System.out.println(sq.getArea(5));\n    }\n}\nclass Rectangle{\n    int area;\n    public int getArea(int l,int b) {\n        area=l*b;\n        return area;\n    }\n}\nclass Square{\n    int area;\n    public int getArea(int a) {\n        area=a*a;\n        return area;\n    }\n}",l={sidebar_position:3,description:"Rectangle Square Area in Java"},o="Rectangle Square Area",d={},u=[{value:"CODE",id:"code",level:2}];function g(e){const a={h1:"h1",h2:"h2",header:"header",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"rectangle-square-area",children:"Rectangle Square Area"})}),"\n",(0,t.jsx)(a.h2,{id:"code",children:"CODE"}),"\n",(0,t.jsx)(s.A,{language:"java",children:c})]})}function h(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}}}]);