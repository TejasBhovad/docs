"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2107],{3716:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var i=r(7462),t=(r(7294),r(3905)),a=r(814);const o={sidebar_position:5,description:"Binary Search in C"},s="Binary Search",d={unversionedId:"algorithms/binarySearch",id:"algorithms/binarySearch",title:"Binary Search",description:"Binary Search in C",source:"@site/docs/algorithms/binarySearch.mdx",sourceDirName:"algorithms",slug:"/algorithms/binarySearch",permalink:"/docs/algorithms/binarySearch",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"Binary Search in C"},sidebar:"tutorialSidebar",previous:{title:"Insertion Sort",permalink:"/docs/algorithms/insertionSort"},next:{title:"C Programs",permalink:"/docs/c/"}},c={},l=[{value:"CODE",id:"code",level:2}],m={toc:l};function h(n){let{components:e,...r}=n;return(0,t.kt)("wrapper",(0,i.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"binary-search"},"Binary Search"),(0,t.kt)("h2",{id:"code"},"CODE"),(0,t.kt)(a.Z,{language:"c",mdxType:"CodeBlock"},'#include <stdio.h>\nint N, key, ar[100];\nint beg, mid, end;\nint bSearch(int key, int beg, int end)\n{\n    mid = (beg + end) / 2;\n    if (end >= mid)\n    {\n        if (key == ar[mid])\n        {\n            return mid;\n        }\n        else if (key > ar[mid])\n        {\n            return bSearch(key, mid + 1, end);\n        }\n        else\n        {\n            return bSearch(key, beg, mid - 1);\n        }\n    }\n    return -1;\n}\nint main()\n{\n    printf("\\nEnter Size of Array: \\n");\n    scanf("%d", &N);\n    for (int i = 0; i < N; i++)\n    {\n        printf("Enter Element(%d): ", i);\n        scanf("%d", &ar[i]);\n    }\n    printf("\\nEnter Element to be searched: ");\n    scanf("%d", &key);\n    beg = 0;\n    end = N;\n    int result = bSearch(key, beg, end);\n    if (result == -1)\n    {\n        printf("\\nElement not found");\n    }\n    else\n    {\n        printf("\\nElement found at index %d\\n", result);\n    }\n    return 0;\n}'))}h.isMDXComponent=!0}}]);