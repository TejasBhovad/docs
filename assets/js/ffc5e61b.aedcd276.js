"use strict";(self.webpackChunkdocsv_2=self.webpackChunkdocsv_2||[]).push([[8523],{92:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>E,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"advanced-databases/rdbms/objects","title":"Objects and nested Objects in SQL","description":"Creating Nested objects in SQL","source":"@site/docs/five/advanced-databases/rdbms/objects.mdx","sourceDirName":"advanced-databases/rdbms","slug":"/advanced-databases/rdbms/objects","permalink":"/docs/five/advanced-databases/rdbms/objects","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Objects and nested Objects in SQL","sidebar_position":1,"description":"Creating Nested objects in SQL"},"sidebar":"tutorialSidebar","previous":{"title":"RDBMS","permalink":"/docs/five/category/rdbms"},"next":{"title":" Nested Tables in SQL","permalink":"/docs/five/advanced-databases/rdbms/tables"}}');var a=n(4848),r=n(8453),i=n(8731);const d={title:"Objects and nested Objects in SQL",sidebar_position:1,description:"Creating Nested objects in SQL"},o="RDBMS",E={},c=[{value:"Write a SQL query to show usage of objects in SQL.",id:"write-a-sql-query-to-show-usage-of-objects-in-sql",level:2},{value:"Write a SQL query to add methods to Objects",id:"write-a-sql-query-to-add-methods-to-objects",level:2},{value:"Write a SQL query to show usage of nested objects in SQL",id:"write-a-sql-query-to-show-usage-of-nested-objects-in-sql",level:2},{value:"Write a SQL query to show usage of Array of Objects in a Table",id:"write-a-sql-query-to-show-usage-of-array-of-objects-in-a-table",level:2}];function l(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"rdbms",children:(0,a.jsx)(i.A,{name:"banner",description:"Objects and nested Objects",children:"RDBMS"})})}),"\n",(0,a.jsx)(t.h2,{id:"write-a-sql-query-to-show-usage-of-objects-in-sql",children:"Write a SQL query to show usage of objects in SQL."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"-- BASIC OBJECTS\n-- Step 1: Create the Address Object Type\nCREATE OR REPLACE TYPE Address AS OBJECT (\n    street VARCHAR2(50),\n    city VARCHAR2(30),\n    state CHAR(2),\n    zip VARCHAR2(10)\n);\n/\n\n-- Step 2: Create the EMPLOYEE Table\nCREATE TABLE EMPLOYEE (\n    empId INT PRIMARY KEY,\n    name VARCHAR2(15),\n    dept VARCHAR2(10),\n    address Address\n);\n\n-- Step 3: Insert Data into the EMPLOYEE Table\nINSERT INTO EMPLOYEE(empId, name, dept, address)\nVALUES (1, 'Clark', 'Sales', Address('123 Main St', 'Anytown', 'CA', '12345'));\n\nINSERT INTO EMPLOYEE(empId, name, dept, address)\nVALUES (2, 'Dave', 'Accounting', Address('456 Oak Ave', 'Somewhere', 'NY', '54321'));\n\nINSERT INTO EMPLOYEE(empId, name, dept, address)\nVALUES (3, 'Ava', 'Sales', Address('789 Elm St', 'Elsewhere', 'TX', '98765'));\n\n-- Step 4: Update the Address of Employee with empId = 1\nUPDATE EMPLOYEE\nSET address = Address('321 Maple St', 'Newtown', 'CA', '67890')\nWHERE empId = 1;\n\n-- Step 5: Fetch the Data from the EMPLOYEE Table\nSELECT * FROM EMPLOYEE;\n\n-- Step 6: Delete the Employee with empId = 2\nDELETE FROM EMPLOYEE\nWHERE empId = 2;\n\n\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["To compile and run the program, either use ",(0,a.jsx)(t.a,{href:"https://www.oracle.com/in/database/technologies/appdev/xe.html",children:"Oracle XE"})," or ",(0,a.jsx)(t.a,{href:"https://onecompiler.com/plsql",children:"OneCompiler"})]})}),"\n",(0,a.jsx)(t.h2,{id:"write-a-sql-query-to-add-methods-to-objects",children:"Write a SQL query to add methods to Objects"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"-- OBJECTS FUNCTIONS\n\nCREATE TYPE EMPLOYEE_TY AS OBJECT\n(\n  EMPLOYEE_ID   NUMBER(6),\n  FIRST_NAME   VARCHAR2(20),\n  LAST_NAME    VARCHAR2(25),\n  EMAIL        VARCHAR2(65),\n  SALARY       NUMBER(8,2),\n  DOB          DATE,\n  MEMBER FUNCTION GET_AGE RETURN NUMBER\n)\n/\n\nCREATE TYPE BODY EMPLOYEE_TY AS\n  MEMBER FUNCTION GET_AGE RETURN NUMBER\n  IS\n  BEGIN\n    RETURN TRUNC(MONTHS_BETWEEN(SYSDATE, DOB) / 12);\n  END GET_AGE;\nEND;\n/\n\nCREATE TABLE EMPLOYEES OF EMPLOYEE_TY;\n\nINSERT INTO EMPLOYEES VALUES\n(EMPLOYEE_TY(100, 'John', 'Doe', 'john.doe@example.com', 5000.00, DATE '1985-01-01'));\n\nSELECT e.FIRST_NAME, e.LAST_NAME, e.SALARY, e.GET_AGE() AS AGE\nFROM EMPLOYEES e;\n\n"})}),"\n",(0,a.jsx)(t.h2,{id:"write-a-sql-query-to-show-usage-of-nested-objects-in-sql",children:"Write a SQL query to show usage of nested objects in SQL"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"-- (DONT WRITE BELOW BEGIN BLOCK IN EXAM)\nBEGIN\n   EXECUTE IMMEDIATE 'DROP TABLE TeacherData';\n   EXECUTE IMMEDIATE 'DROP TYPE Teacher';\n   EXECUTE IMMEDIATE 'DROP TYPE Class';\n   EXECUTE IMMEDIATE 'DROP TYPE Student';\nEXCEPTION\n   WHEN OTHERS THEN NULL; -- Ignore errors if objects do not exist\nEND;\n/\n\n--- ACTUAL CODE STARTS HERE\n\n-- Step 1: Create the Student Object Type\nCREATE OR REPLACE TYPE Student AS OBJECT (\n    studentId INT,\n    studentName VARCHAR2(50)\n);\n/\n\n-- Step 2: Create the Class Object Type\nCREATE OR REPLACE TYPE Class AS OBJECT (\n    className VARCHAR2(50),\n    students Student -- Single Student object\n);\n/\n\n-- Step 3: Create the Teacher Object Type\nCREATE OR REPLACE TYPE Teacher AS OBJECT (\n    teacherId INT,\n    teacherName VARCHAR2(50),\n    subject VARCHAR2(50),\n    classes Class -- Single Class object\n);\n/\n\n-- Step 4: Create a Table to Store Teacher Objects\nCREATE TABLE TeacherData OF Teacher;\n/\n\n-- Step 5: Insert Data into the TeacherData\nINSERT INTO TeacherData VALUES (\n    Teacher(1, 'Mr. Smith', 'Mathematics', Class('Algebra', Student(101, 'Alice')))\n);\n\nINSERT INTO TeacherData VALUES (\n    Teacher(2, 'Mrs. Johnson', 'Science', Class('Biology', Student(102, 'Bob')))\n);\n\nINSERT INTO TeacherData VALUES (\n    Teacher(3, 'Ms. Davis', 'History', Class('World History', Student(103, 'Charlie')))\n);\n\n-- Step 6: Fetch the Data from the TeacherData\nSELECT t.teacherId, t.teacherName, t.subject, t.classes.className,\n       t.classes.students.studentId, t.classes.students.studentName\nFROM TeacherData t;\n\n-- Step 7: Update a Student's Name\nUPDATE TeacherData\nSET classes = Class('Algebra', Student(101, 'Alicia'))\nWHERE teacherId = 1;\n\n-- Step 9: Fetch the Data from the TeacherData after Update and Delete\nSELECT t.teacherId, t.teacherName, t.subject, t.classes.className,\n       t.classes.students.studentId, t.classes.students.studentName\nFROM TeacherData t;\n\n"})}),"\n",(0,a.jsx)(t.h2,{id:"write-a-sql-query-to-show-usage-of-array-of-objects-in-a-table",children:"Write a SQL query to show usage of Array of Objects in a Table"}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"Movie Guide magazine wants to keep a database of directors and the films that they directed. The director table has the attributes of name, age, and residence. The film is saved as an object with the attributes of title, genre, year, and rating. As a director may direct more than one film, the film object is implemented into the director table using a nesting technique. Show the implementation of the relationships described."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"-- Create the Film object type\nCREATE OR REPLACE TYPE Film AS OBJECT (\n  title VARCHAR2(100),\n  genre VARCHAR2(50),\n  year INT,\n  rating FLOAT\n);\n/\n\n-- Create the Film nested table type\nCREATE OR REPLACE TYPE FilmList IS TABLE OF Film;\n/\n\n-- Create the Director table with a nested table column\nCREATE TABLE Director (\n  name VARCHAR2(50),\n  age INT,\n  residence VARCHAR2(50),\n  films FilmList\n) NESTED TABLE films STORE AS films_nt;\n/\n\n-- Insert a director with their films\nINSERT INTO Director\nVALUES (\n  'Steven Spielberg',\n  75,\n  'Pacific Palisades, California',\n  FilmList(\n    Film('Jurassic Park', 'Science Fiction', 1993, 8.1),\n    Film('Schindler''s List', 'Drama', 1993, 8.9),\n    Film('E.T. the Extra-Terrestrial', 'Science Fiction', 1982, 7.5)\n  )\n);\n/\n\n-- Query the directors and their films\nSELECT\n  d.name,\n  d.age,\n  d.residence,\n  f.title,\n  f.genre,\n  f.year,\n  f.rating\nFROM Director d\nCROSS JOIN TABLE(d.films) f;\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8731:(e,t,n)=>{n.d(t,{A:()=>r});n(6540);var s=n(6025),a=n(4848);const r=e=>{let{name:t,description:n,children:r}=e;const i=(0,s.Ay)(`/images/${t}.jpg`);return(0,a.jsxs)("div",{style:{display:"inline-block",height:"150px",width:"100%",position:"relative",overflow:"hidden",borderRadius:"5px"},children:[(0,a.jsx)("img",{src:i,alt:i,style:{width:"100%",height:"100%",objectFit:"cover",position:"absolute",zIndex:-1}}),(0,a.jsx)("h2",{style:{color:"white",padding:"12px",boxSizing:"border-box",paddingBottom:"0px",fontWeight:"500"},children:r}),(0,a.jsx)("p",{style:{color:"white",paddingTop:"0px",paddingBottom:"12px",paddingLeft:"12px",paddingRight:"12px",boxSizing:"border-box"},children:n})]})}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var s=n(6540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);