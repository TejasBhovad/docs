"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[819],{3846:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>f,contentTitle:()=>c,default:()=>l,frontMatter:()=>p,metadata:()=>a,toc:()=>x});var s=i(7462),e=(i(7294),i(3905)),o=i(814),r=i(3542);const p={sidebar_position:3,description:"Infix to Postfix Expressions"},c="Infix to Postfix Conversion",a={unversionedId:"stacks/postfix-convert",id:"stacks/postfix-convert",title:"Infix to Postfix Conversion",description:"Infix to Postfix Expressions",source:"@site/docs/stacks/postfix-convert.mdx",sourceDirName:"stacks",slug:"/stacks/postfix-convert",permalink:"/docs/stacks/postfix-convert",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Infix to Postfix Expressions"},sidebar:"tutorialSidebar",previous:{title:"Stack",permalink:"/docs/stacks/"},next:{title:"Postfix Evaluation",permalink:"/docs/stacks/postfix-evaluate"}},f={},x=[],d={toc:x};function l(n){let{components:t,...i}=n;return(0,e.kt)("wrapper",(0,s.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,e.kt)("h1",{id:"infix-to-postfix-conversion"},"Infix to Postfix Conversion"),(0,e.kt)(o.Z,{language:"c",mdxType:"CodeBlock"},r.Z))}l.isMDXComponent=!0},3542:(n,t,i)=>{i.d(t,{Z:()=>s});const s='#include <stdio.h>\n#include <ctype.h>\n\nchar stack[100];\nint top = -1;\n\nvoid\npush (char x)\n{\n  top++;\n  stack[top] = x;\n}\n\nvoid\ndisplay (char *ptr)\n{\n  printf ("\\nElements in Stack:\\n");\n  for (int i = 0; i <= top; i++)\n    {\n      printf (" %d", *(ptr + i));\n    }\n}\n\nchar\npop ()\n{\n  if (top == -1)\n    {\n      printf ("\\nUnderflow Error");\n      return -1;\n    }\n\n  else\n    {\n\n      return stack[top--];\n    }\n}\n\nint\npriority (char x)\n{\n  if (x == \'+\' || x == \'-\')\n    {\n      return 1;\n    }\n\n  if (x == \'*\' || x == \'/\' || x == \'%\')\n    {\n      return 2;\n    }\n  return 0;\n}\n\nint\nmain ()\n{\n  char exp[100];\n  char *e, x;\n  printf ("Enter the expression : ");\n  scanf ("%s", exp);\n  printf ("\\n");\n  e = exp;\n\n  while (*e != \'\\0\')\n    {\n      if (isalnum (*e))\n\t{\n\t  printf ("%c ", *e);\n\t}\n\n      else if (*e == \'(\')\n\t{\n\t  push (*e);\n\t}\n\n      else if (*e == \')\')\n\t{\n\t  while ((x = pop ()) != \'(\')\n\t    {\n\t      printf ("%c ", x);\n\t    }\n\t  // display(stack);\n\t}\n      else\n\t{\n\t  if (priority (*e) <= priority (stack[top]))\n\t    {\n\t      printf ("%c ", pop ());\n\t    }\n\n\t  push (*e);\n\t}\n      e++;\n    }\n// display(stack);\n  while (top != -1)\n    {\n      printf ("%c ", pop ());\n    }\n  display (stack);\n  printf ("\\n");\n  return 0;\n}\n'}}]);