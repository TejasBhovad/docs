"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[864],{2610:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var d=t(7462),r=(t(7294),t(3905)),i=t(814);const a={sidebar_position:1,description:"Singly Linked List in C"},o="Singly Linked List",l={unversionedId:"linkedlist/singly",id:"linkedlist/singly",title:"Singly Linked List",description:"Singly Linked List in C",source:"@site/docs/linkedlist/singly.mdx",sourceDirName:"linkedlist",slug:"/linkedlist/singly",permalink:"/docs/linkedlist/singly",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Singly Linked List in C"},sidebar:"tutorialSidebar",previous:{title:"LinkedList",permalink:"/docs/category/linkedlist"},next:{title:"Journal",permalink:"/docs/category/journal"}},s={},c=[{value:"CASES IN INSERTION",id:"cases-in-insertion",level:2},{value:"CASES IN DELETION",id:"cases-in-deletion",level:2},{value:"CODE",id:"code",level:2}],u={toc:c};function f(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,d.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"singly-linked-list"},"Singly Linked List"),(0,r.kt)("h2",{id:"cases-in-insertion"},"CASES IN INSERTION"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"At Start of linkedlist"),(0,r.kt)("li",{parentName:"ol"},"At End of linkedlist"),(0,r.kt)("li",{parentName:"ol"},"After a defined(key) element"),(0,r.kt)("li",{parentName:"ol"},"Before a defined(key) element")),(0,r.kt)("h2",{id:"cases-in-deletion"},"CASES IN DELETION"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Delete Elements from Start"),(0,r.kt)("li",{parentName:"ol"},"Delete Elements from End"),(0,r.kt)("li",{parentName:"ol"},"Delete Inputted Elements")),(0,r.kt)("h2",{id:"code"},"CODE"),(0,r.kt)(i.Z,{language:"c",mdxType:"CodeBlock"},'#include <stdlib.h>\n#include <stdio.h>\nstruct node *head = 0, *temp, *newNode;\nstruct node\n{\n    int data;\n    struct node *next;\n};\nvoid display()\n{\n    struct node *current = head;\n    printf("List: ");\n    while (current != 0)\n    {\n        printf("%d ", current->data);\n        current = current->next;\n    }\n    printf("\\n");\n}\nstruct node *createNode()\n{\n    newNode = (struct node *)malloc(sizeof(struct node));\n    newNode->next = 0;\n    if (head == 0)\n    {\n        head = newNode;\n        temp = newNode;\n    }\n    printf("\\nEnter Value to be Added: ");\n    scanf("%d", &(newNode->data));\n    return newNode;\n}\nstruct node *addNodeStart()\n{\n\n    if (head == 0)\n    {\n        printf("\\nERROR: Linked List not Defined.");\n    }\n    else\n    {\n        newNode = createNode();\n        newNode->next = head;\n        head = newNode;\n    }\n    return head;\n}\nstruct node *addNodeEnd()\n{\n\n    if (head == 0)\n    {\n        printf("\\nERROR: Linked List not Defined.");\n    }\n    else\n    {\n        newNode = createNode();\n        struct node *current = head;\n        while (current->next != 0)\n        {\n            current = current->next;\n        }\n        current->next = newNode;\n        temp = newNode;\n    }\n    return head;\n}\nstruct node *addNodeAfter()\n{\n\n    if (head == 0)\n    {\n        printf("\\nERROR: Linked List not Defined.");\n        newNode = createNode();\n        return newNode;\n    }\n    else\n    {\n        int key;\n        printf("\\nEnter Value to be added after: ");\n        scanf("%d", &key);\n        newNode = createNode();\n        struct node *current = head;\n        while (current->data != key)\n        {\n            current = current->next;\n        }\n        newNode->next = current->next;\n        current->next = newNode;\n    }\n    return head;\n}\nstruct node *addNodeBefore()\n{\n    if (head == 0)\n    {\n        printf("\\nERROR: Linked List not Defined.");\n        newNode = createNode();\n        return newNode;\n    }\n    else\n    {\n        int key;\n        printf("\\nEnter Value to be added before: ");\n        scanf("%d", &key);\n        newNode = createNode();\n        struct node *current = head, *prev;\n        while (current->data != key)\n        {\n            prev = current;\n            current = current->next;\n        }\n        newNode->next = prev->next;\n        prev->next = newNode;\n    }\n    return head;\n}\nvoid deleteNodeEnd()\n{\n    if (head == 0)\n    {\n        printf("\\nERROR: No Element to Remove.");\n    }\n    else\n    {\n        struct node *current = head, *prev = 0;\n        while (current->next != 0)\n        {\n            prev = current;\n            current = current->next;\n        }\n        printf("\\nRemoved Element: %d\\n", current->data);\n        prev->next = 0;\n        free(current);\n    }\n}\nvoid deleteNodeStart()\n{\n    if (head == 0)\n    {\n        printf("\\nERROR: No Element to Remove.");\n    }\n    else\n    {\n        printf("\\nRemoved Element: %d\\n", head->data);\n        struct node *current;\n        current = head;\n        head = current->next;\n        free(current);\n    }\n}\nvoid deleteNodeAt()\n{\n\n    if (head == 0)\n    {\n        printf("\\nERROR: No Element to Remove.");\n    }\n    else\n    {\n        int key, ctr = 0;\n        printf("\\nEnter Value to be removed: ");\n        scanf("%d", &key);\n        struct node *current = head, *prev = 0;\n        while (current->data != key)\n        {\n            ctr++;\n            prev = current;\n            current = current->next;\n        }\n        \n        // when the first element is to be removed prev element is head\n        if (ctr > 1)\n        {\n            prev->next = current->next;\n        }\n        else\n        {\n            head = current->next;\n        }\n\n        free(current);\n    }\n}\nint main()\n{\n    int choice;\n    do\n    {\n        printf("\\nENTER CHOICE:");\n        printf("\\n1. Create Node (with initial value)");\n        printf("\\n2. Add Node at Start of List");\n        printf("\\n3. Add Node at End of List");\n        printf("\\n4. Add Node after key element");\n        printf("\\n5. Add Node before key element");\n        printf("\\n6. Delete Element from Start");\n        printf("\\n7. Delete Element from End");\n        printf("\\n8. Delete key Element");\n        printf("\\n9. EXIT\\n");\n        scanf("%d", &choice);\n        switch (choice)\n        {\n        case 1:\n        {\n            newNode = createNode();\n            display();\n            break;\n        }\n        case 2:\n        {\n            head = addNodeStart();\n            display();\n            break;\n        }\n        case 3:\n        {\n            head = addNodeEnd();\n            display();\n            break;\n        }\n        case 4:\n        {\n            head = addNodeAfter();\n            display();\n            break;\n        }\n        case 5:\n        {\n            head = addNodeBefore();\n            display();\n            break;\n        }\n        case 6:\n        {\n            deleteNodeStart();\n            display();\n            break;\n        }\n        case 7:\n        {\n            deleteNodeEnd();\n            display();\n            break;\n        }\n        case 8:\n        {\n            deleteNodeAt();\n            display();\n            break;\n        }\n        case 9:\n        {\n            printf("\\nExited.\\n");\n            break;\n        }\n        default:\n        {\n            printf("\\nInvalid Choice, Try again.\\n");\n            continue;\n        }\n        }\n    } while (choice != 9);\n    return 0;\n}'))}f.isMDXComponent=!0}}]);